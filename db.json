{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/algolia.svg","path":"img/algolia.svg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/icp.png","path":"img/icp.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/sakura.js","path":"js/sakura.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/third-party/ClickShowText.js","path":"js/third-party/ClickShowText.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/third-party/activate-power-mode.js","path":"js/third-party/activate-power-mode.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/third-party/canvas-nest.js","path":"js/third-party/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/third-party/canvas-ribbon.js","path":"js/third-party/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/third-party/click_heart.js","path":"js/third-party/click_heart.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/third-party/fireworks.js","path":"js/third-party/fireworks.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/third-party/piao.js","path":"js/third-party/piao.js","modified":0,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0}],"Cache":[{"_id":"source/_data/link.yml","hash":"4522718905e80b7f4c4f93d9ae2dcedaffe6282e","modified":1599135384818},{"_id":"source/_posts/CentOS搭建GitLab服务器.md","hash":"9eefc4b29c08e3a55ccf4b2e8c657ae8f9b159aa","modified":1599210202596},{"_id":"source/_posts/Mybatis学习总结.md","hash":"7671c8988dd6d61455183c854cb6479e60b13d6c","modified":1599620936279},{"_id":"source/background-photo/index.md","hash":"ef8ecb364b26502df523769e70653cf005793f5b","modified":1599617040240},{"_id":"source/categories/index.md","hash":"d2dd63c9c27626f75a6c081388b415798900fbc4","modified":1599132652392},{"_id":"source/link/index.md","hash":"ff3484540ccc38e1785aeb2f06f9423c35b2c178","modified":1599132621992},{"_id":"source/photos/index.md","hash":"b0dc19091dda6033bb353f3c58b015e9456daeb8","modified":1599614812956},{"_id":"source/tags/index.md","hash":"44439860578d906f01170b9d80c78b56c14fbc0c","modified":1599132632076},{"_id":"source/tools/index.md","hash":"b2188f83ca01f272066c180b72d1ee0bf8e2f6d4","modified":1599136164649},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1599046186259},{"_id":"source/.DS_Store","hash":"0c28c23dee04ed7e9c9b908e6b5dce733d006348","modified":1598790332311},{"_id":"themes/butterfly/_config.yml","hash":"ca629b602cd901e4ad04fb0c51179495492b30f7","modified":1599616424075},{"_id":"themes/butterfly/package.json","hash":"fd31e812cbe1ced7a396a94a201dd99c6c4fcd76","modified":1598635006000},{"_id":"themes/butterfly/languages/default.yml","hash":"fd548d85a8df34286f72274a415dcc30c18ce44f","modified":1598635006000},{"_id":"themes/butterfly/languages/en.yml","hash":"fd548d85a8df34286f72274a415dcc30c18ce44f","modified":1598635006000},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"adc016d0e7dcc5cbaf9e22c68c0e051227e77295","modified":1599038278201},{"_id":"themes/butterfly/.DS_Store","hash":"d9daea6b999773c177ef90ef5c80d606a9ab8f18","modified":1598780647255},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"bbb6cf3cb266994966e43e4f85c7cd406a098057","modified":1598635006000},{"_id":"themes/butterfly/layout/404.pug","hash":"70ca086e151a769a8825c22d024acef0664c2c28","modified":1598635006000},{"_id":"themes/butterfly/layout/archive.pug","hash":"bd62286afb64a51c97e800c5945620d51605d5fa","modified":1598635006000},{"_id":"themes/butterfly/layout/category.pug","hash":"d014234c26d2c07caaea6703f7b48cb69c51907d","modified":1598635006000},{"_id":"themes/butterfly/layout/flink.pug","hash":"308b706f2326e792d75337a3bbdba16d336efa62","modified":1598635006000},{"_id":"themes/butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1598958502693},{"_id":"themes/butterfly/layout/page.pug","hash":"cd21633a48082707e59871b01135efc0a6e8b006","modified":1598635006000},{"_id":"themes/butterfly/layout/post.pug","hash":"1eb758bfd3f4f20259444afbc6191edc269884b7","modified":1598635006000},{"_id":"themes/butterfly/layout/tag.pug","hash":"3bb2a700c6d709d2757d55d357eed1fca5644e24","modified":1598635006000},{"_id":"themes/butterfly/layout/tools.pug","hash":"a2eb11980d5afc9f4dba800985fe110611193df5","modified":1599038552338},{"_id":"themes/butterfly/layout/includes/.DS_Store","hash":"284186407314d85c5d40c77384d37a4308a00c82","modified":1599037435560},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"0101630649f7b578a2c9ef7beaa1c9b8fb307c7a","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"126a6d5bbdf098f69762e4288845ea66ed5ebc98","modified":1598777458298},{"_id":"themes/butterfly/source/.DS_Store","hash":"c9e17fe183e41322b205c7f5b2f4cb6c73341913","modified":1599134258612},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"d315e749eefa59fa550272d7366ffd71cc1825c0","modified":1599132890863},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"2dea24bf9ed60156770545eb1c6ccf07dfd4220b","modified":1599031135320},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"79ef449c5e04d0ecb4b9980d419ecbaf3d54d35a","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"296248c1e26b3378f8cc8f11b005ce8b2e280c52","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"c10836fd167c0401bf16ae2a1604c85462241ba2","modified":1598635006000},{"_id":"themes/butterfly/scripts/events/404.js","hash":"3c30dbd8b910ce7d8d7d8353cf2266cbc5d8775d","modified":1598635006000},{"_id":"themes/butterfly/scripts/events/check_hexo.js","hash":"15c58a4cb86f64581f71c37d9f2e1395e22a52bf","modified":1598635006000},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"d575137c8779e50422c2416f4d0832fdea346ee6","modified":1598635006000},{"_id":"themes/butterfly/scripts/events/replace_config.js","hash":"cdb4f462bceb155f59b98cd705efadbdc1fb5309","modified":1598635006000},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"e9cf275c362d8634f093e63068da7ed1e53c7600","modified":1598635006000},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"283e1169c4f3adbf8affb3ed906e3d484c196a7a","modified":1598635006000},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"7e40f62867353c33c8efb32dd391da173925c705","modified":1598635006000},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"ef0acdde0825973690ccd65bb28e484224f9cb8b","modified":1598635006000},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"d47bc847d30005b6a4a69d32832e551c1a348fc4","modified":1598635006000},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"4ee6ffe000a52e6a3ac393ee47c4fca38b8cccf7","modified":1598635006000},{"_id":"themes/butterfly/scripts/tags/button.js","hash":"e75283267f3a4773e6d803593d557e218396f260","modified":1598635006000},{"_id":"themes/butterfly/scripts/tags/gallery.js","hash":"77e657eb74a7718b7e11e04284827e4a85805b86","modified":1598635006000},{"_id":"themes/butterfly/scripts/tags/hide.js","hash":"ea5939e3d5b3d3106527093a4fe0adaaf1fef2f8","modified":1598635006000},{"_id":"themes/butterfly/scripts/tags/mermaid.js","hash":"f358a6a5b7979290263e5b02766d0b9449e60841","modified":1598635006000},{"_id":"themes/butterfly/scripts/tags/note.js","hash":"7fa9d0500276a38be28bee9ebf1bb4443c77ba5b","modified":1598635006000},{"_id":"themes/butterfly/scripts/tags/site.js","hash":"51f4a8b26379ed54868a260cbf7129c9c3358fc3","modified":1599038874396},{"_id":"themes/butterfly/scripts/tags/tabs.js","hash":"1f3bff5bbab30bb103e256ea6fb5b71a1bfe6dc1","modified":1598635006000},{"_id":"themes/butterfly/source/css/var.styl","hash":"440f8974756955b11f302f0c8a93666d44c4bbc4","modified":1598783851074},{"_id":"themes/butterfly/source/css/index.styl","hash":"9cf8797083e6fa22d26a2cfe85b1ebb8a5a8c718","modified":1598777661694},{"_id":"themes/butterfly/source/img/.DS_Store","hash":"67a500b45440bc9294d6e91a84b44fb26e32357b","modified":1598784407899},{"_id":"themes/butterfly/source/css/.DS_Store","hash":"db57eca040b81c22da5bcac31c13ebbe8ddc026e","modified":1599033450556},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1598635006000},{"_id":"themes/butterfly/source/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1598635006000},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1598635006000},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1598635006000},{"_id":"themes/butterfly/source/img/icp.png","hash":"cb1fd69b38ec23ce8366668ddffbbd0160de0104","modified":1598635006000},{"_id":"themes/butterfly/source/img/loading.gif","hash":"5f0287fb8fb98872fe1998c6f781111819e71806","modified":1598635006000},{"_id":"themes/butterfly/source/js/main.js","hash":"de6c0810af70b6773fffef61e8abcc8f2db752ab","modified":1598635006000},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"6d5aaa12b9afca692165c88ef76ace308ac1c8c2","modified":1598635006000},{"_id":"themes/butterfly/source/js/utils.js","hash":"ad37327c20e4b2ef63b33ee815da96f7a4a00a2a","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/custom/coverTypeWriter.ejs","hash":"d55fc941b4cb712ac25db852625053b56ab92687","modified":1598920718817},{"_id":"themes/butterfly/layout/includes/custom/customFooter.ejs","hash":"f2972f340db9bfefefd6bceebb029eb75f23658c","modified":1599050502111},{"_id":"themes/butterfly/layout/includes/custom/rightmenu.ejs","hash":"1e27f920b78bc993e8a68f7a4b156f97ac768411","modified":1599032433526},{"_id":"themes/butterfly/source/js/sakura.js","hash":"c10e1b69c5f122fa748270bca5df5a3ffc8db0da","modified":1599097082852},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"a3c819238dceab080d5db0336ef07009ca216310","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"afb58249ddd121e5a8cf5d289fe215e15b90b82a","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/head/aplayer.pug","hash":"b24959f00ac75f12f66b445158aad143ee860795","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"4936263d44f3df51ffe2d729cd32b36f56c5fdc4","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"8df13e06cdfff76003e0c5e77ff309091027a766","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/head/darkmode.pug","hash":"a8db525c3e160e99644d88368e30cc726a0d30fe","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"1912f7e0bf7ddbfc386485ee4856fb1cd0b08a74","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"1a6715d6b570ac2bbaa7647524c6262135b43a73","modified":1598964022265},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"62cf37e28795d8b68a0e850ec8c94987b9e08db5","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"12dc74a7370b8d00f010e6914c09b1b12343fd92","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"14cd0f9c0c578512896b487263cd48570d74771a","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"7509981bcd5c5974f305a045c32ed3da754251e4","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"26f1955e89894dfb54573e616880ab6fad878f2d","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"0d953e51d04a9294a64153c89c20f491a9ec42d4","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/loading/loading-js.pug","hash":"3cf431a4f04997b55873f7099c1402155b19cc95","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/loading/loading.pug","hash":"5276937fbcceb9d62879dc47be880cd469a27349","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"68dfd3c6a0f00b3ffc0333c81e165b4626f7425f","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"5ef0487d7418d845b917c9596e31b14c4e533f73","modified":1599049114739},{"_id":"themes/butterfly/layout/includes/mobile-sidebar/index.pug","hash":"d12fab033fb32b55abbc9be9b04cc6ab6465b98e","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/mobile-sidebar/mobile-menus.pug","hash":"b13d95c53c5031e6305ec1fe83d6758f52fa96ee","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"88e3b611b03149665e4113cfa39595c1a3fca7e5","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"bab59f87da66386e5abc84550614752c660a0705","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"58d782e47c5f89143ec4d42e8970fd8eb8f1faec","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"abce595b5b8887577af07a8e2644fd76d2443556","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"a60f538fb9d819b4a13a938296606638c605e6b2","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"1fbecfd299068f90d727f0c8c65e2a792fa6e3e2","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"907636bda4cbf9ca6f4e943bb49f18c282f2786f","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"2e940de1a6261fd378e16e4cd3362a9d69c12f50","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"6d9c7cda3a5c19ac53cbe548b3df09050c621db3","modified":1598874670743},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"393a6f9a5dcabe8d96e9b6cb5620c12966dfd37f","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"623d0079f1fe453f2b2f53fe954b175b33ed2b54","modified":1598874644908},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"83cb6ba0d8c913570147b3871c7fc0674dac8cdf","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"b9b371a4aa3f2b088ceb9b20c9e39ee82e730a88","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"196dc7ceaeb9a6da861f91af86438b86b25c8378","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"2b78fb1ed7fa91dc0957d025d2e4561522db4d7a","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"b1cdd519743dd5c50204f0446a09c1b670ba2a54","modified":1598778410659},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"ce316dc8aba2bf5556b9637124b64ef68ad4c6ad","modified":1598635006000},{"_id":"themes/butterfly/source/css/_custom/rightmenu.styl","hash":"e017f299d7cd179a08e343452a0f2840497e33cd","modified":1599034905076},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"7291446c24c6fac234188023056a1da9c514b943","modified":1598635006000},{"_id":"themes/butterfly/source/css/_custom/custom.styl","hash":"134356b7cc94c94992acec7164c14cb49fbbb409","modified":1599136420614},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"c2dabfc296843e68a6019ccac55fc5de667d741f","modified":1598635006000},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"36695e216d6f55df636a850a67f93972fda5feb9","modified":1598635006000},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"0e840a7b25c0ffa579a31a352f03fd3892d013e9","modified":1598635006000},{"_id":"themes/butterfly/source/css/_layout/404.styl","hash":"cd930735151d6a1ac41fb44e2907106417c51caa","modified":1598635006000},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"628be35c91232104c773eec658d1fac0e7afaeb0","modified":1598635006000},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"29f48f9370f245e6e575b5836bccf47eb5688d8b","modified":1598635006000},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"8d5f3fee0a85b47e17f298e7342beb830a0f5297","modified":1598635006000},{"_id":"themes/butterfly/source/css/_layout/flink.styl","hash":"43f00986410f3dc0eed9e0bf9478801da32be24f","modified":1598635006000},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"fd825c9d71fcd06a7c882850d1db0e9637f84107","modified":1598635006000},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"1ecf95222e6d29ecb6f69033e4e24cc4583652df","modified":1598635006000},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"58d75ca0c90397afd28a816bb8201b71e80f50c0","modified":1598635006000},{"_id":"themes/butterfly/source/css/_layout/mobile-sidebar.styl","hash":"a554125aa5dd674182c35684179b2aac1cd83f2b","modified":1598635006000},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"4ae68b64ea0137427edf095190d0b7a6bf72b4a4","modified":1598635006000},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"49b7e06211053011ef5d3fe40acb6be485161041","modified":1598635006000},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"8d9facb50c0ded8bfcffe3d924cb2e7e4eefa168","modified":1598635006000},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"7bf7af4754baba07edfc614621bdb965442cdc2f","modified":1598635006000},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"6ea8b4142e7d84ed2c99c7ed36d4066c0b8db42e","modified":1598635006000},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"cf322be6e7e20bfe6993ac76143ffc6d4c52b6d4","modified":1598635006000},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"8070cbe32c13db96b03775bf1520503dd5191147","modified":1598635006000},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"4a0c674840be2ec8096093d71df0a38b2a3e8314","modified":1598635006000},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"cdd2634fefe991b00492435af7de629a1caca23f","modified":1598635006000},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"6874adc2e276443f354bbe50d0072e9bec37243c","modified":1598635006000},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"8897faaebb4e470d3e08776f4ac8cb1eda27fc57","modified":1598635006000},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"21b82c9b98af50a062297a6bf3f4608589f15bba","modified":1598635006000},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"e85e4b6bff9ca4cb9f2376e39994ba8e89ec5ff5","modified":1598635006000},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"9fc8323b27044ce7909b33e2b59500a68688e290","modified":1598635006000},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"f718eec64b4586db169f566f403c6e5ad5d2af02","modified":1598635006000},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"89e744abc5e41f4855e7b87b13b854f4ec4ffc0e","modified":1598635006000},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"5e9423070e22df2522dac0a8e8be6f40ecae507a","modified":1598635006000},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"39f54f4cb3dcc7522d2efd09d5d6ec6209b5fb29","modified":1598635006000},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"41a92e96c66dececcad050ada2201de196f5f697","modified":1598635006000},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"d0386ba6d8d63afc72b9673e8f3e89df6446ffc2","modified":1598635006000},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"6e74130e3cc5598d15a2f37fc558cc0086c11c66","modified":1598635006000},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"8a34b42392cfe84212ec3d8911dde28a3f52815c","modified":1598635006000},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"1756791581c0ec51cb03353a09dac4778d944349","modified":1598635006000},{"_id":"themes/butterfly/source/css/_tags/site-card.styl","hash":"4f477c199dc1844b6b5e9da572adb5a107538727","modified":1599044720391},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1598635006000},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"99bc7ef172e9af332d652e92c5ec8b9ec1481434","modified":1598635006000},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"591c1a91601287ab6d21e90bebf697792c785c10","modified":1598635006000},{"_id":"themes/butterfly/source/js/third-party/ClickShowText.js","hash":"32864aee35b5d739a36702b8d916b17bac52b17e","modified":1598635006000},{"_id":"themes/butterfly/source/js/third-party/activate-power-mode.js","hash":"2c4ab494225b7d04eed934efc43a43791e596f4a","modified":1598635006000},{"_id":"themes/butterfly/source/js/third-party/canvas-nest.js","hash":"38cb4f2b025f6354124dadb69fe0e0ce57d35094","modified":1598635006000},{"_id":"themes/butterfly/source/js/third-party/canvas-ribbon.js","hash":"1ddf4f6896175e77518f0fbd45776132b2954fb6","modified":1598635006000},{"_id":"themes/butterfly/source/js/third-party/click_heart.js","hash":"004ea645ed8c5e354711b5fc0dbfe015e181916b","modified":1598635006000},{"_id":"themes/butterfly/source/js/third-party/fireworks.js","hash":"411ced4031a856a5b87f7c62d3800027d12bacec","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"481cd5053bafb1a19f623554a27d3aa077ea59c3","modified":1598635006000},{"_id":"themes/butterfly/source/js/third-party/piao.js","hash":"8846788202ee4ad18a814fa492ac39bb7f09548a","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"76634112c64023177260d1317ae39cef2a68e35f","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"cfe63e7d26a6665df6aa32ca90868ad48e05ec04","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/third-party/chat/gitter.pug","hash":"d1d2474420bf4edc2e43ccdff6f92b8b082143df","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"3f05f8311ae559d768ee3d0925e84ed767c314d3","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"24a926756c2300b9c561aaab6bd3a71fdd16e16d","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"8d1297b79ee4a92842d76a0d720a2fe782d144b2","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"9d933e6f8659199f1e20ce76aca0001b338b5d05","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"489256e1ef1252b8c30a4bab57e54d881263dc63","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"95c73e810fccf94b70cf0b8727fff2072df7a323","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"71cf3d056b1a11e8a5e2980979af1c6b0248d762","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"a42ee0f5a7f606d752f7b9dd92b6234d991f518d","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"bd60d138704c86a4a8af9573ff3313135c97ef1a","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"e2ba99a98d8e1b54252eed079d71b814266b2b07","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"2c87fb060e4a366276d16bf49ce211a1f205f92c","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"53af4ffa8119c7bbba3f066de74845be91400b5b","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"73356f1068c7426597e268d6c4aefa2b0ac3a1d9","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"b1ae0c11a1ec73273cb55d7e2f9506f038633937","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"1310800bc30b4e1cad93982991041589ee70ffef","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"fdd0187307e8c708507c21aa71a2f7d9b040c431","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"bd9ed1a0e67b70e0bc90f553c51bf880aea46aeb","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"e67a95ca1034023fd8151ca901eafced8ff50c87","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/leancloud.pug","hash":"b8e000c5e98ff160bcb1ca9ca76f413105e98f28","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"debc2e0a4747dc821df9ee99c341230cf20916c2","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"da3b9437d061ee68dbc383057db5c73034c49605","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"a623a9b495ff13485d73acc51541085776dd04d2","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"309f51bc5302e72fc469d54c577fbcfe57fb07a8","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"c40f7d6973811e53fcfbe881174ab373b4ea03ad","modified":1598635006000},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"368f5f75c506db77e4e1a20c29e9a3e2b4c3d783","modified":1598635006000},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"356d3e110f93430e5515afcd88a3814ac9895623","modified":1598635006000},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"13d92a9dbba94fd2cf2608dfffb6e029fa47d2a5","modified":1598635006000},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"7574576b27d55d2281e67072981a1c3d0ad6a15f","modified":1598635006000},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1598635006000},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"d40f1baec16c4a62e4a3a9a0379d1ca3ac6746b2","modified":1598635006000},{"_id":"public/search.xml","hash":"7dd178afc3439d4d96b2608b59dc594cf4ac00cb","modified":1599903241808},{"_id":"public/404.html","hash":"d3a862e00a06af1ff3850b1175f26995c3cf8feb","modified":1599903241808},{"_id":"public/background-photo/index.html","hash":"1325a732bc239dc72ddbcbadffaa501aae2d994e","modified":1599903241808},{"_id":"public/categories/index.html","hash":"e0d98309582fb40a1f9c36ffb32d4ad3d569cfe8","modified":1599903241808},{"_id":"public/link/index.html","hash":"ce431ff200a57dbcdbd712a4d16a8e3ffb0fb861","modified":1599903241808},{"_id":"public/photos/index.html","hash":"7982c3c10a3c81db3b9c013de3624b6889cbb287","modified":1599903241808},{"_id":"public/tags/index.html","hash":"f16dd6847de1c1e980f87e7ef90f2e9c9f9a58c6","modified":1599903241808},{"_id":"public/tools/index.html","hash":"191c90c0a8e5adb1b00fbc91ec7e5426c3b826c1","modified":1599903241808},{"_id":"public/posts/202006030942.html","hash":"f6b9f0b2382c9e4fabde373ea27d2dd250e999e7","modified":1599903241808},{"_id":"public/posts/202005250941.html","hash":"620a661123597a98d38cc2fd118fa16062ef04c9","modified":1599903241808},{"_id":"public/archives/index.html","hash":"83598c853187e426c8609c19f4c607f56cb26fcd","modified":1599903241808},{"_id":"public/archives/2020/index.html","hash":"ba49d3ca4aa0fc251bd16e7eb54978e60f782796","modified":1599903241808},{"_id":"public/archives/2020/05/index.html","hash":"771ea5153a717f95b32d41cb822d8e20d728e23c","modified":1599902795906},{"_id":"public/archives/2020/09/index.html","hash":"44ed746ab2b04144756b5b12c567bd4da0beff7f","modified":1599903241808},{"_id":"public/categories/Gitlab/index.html","hash":"4994a45055b0209150b0e8cee9fa510a9379d986","modified":1599903241808},{"_id":"public/index.html","hash":"90b0de0af5d145d34441076125b4604d754cad08","modified":1599903241808},{"_id":"public/tags/Gitlab/index.html","hash":"0e319617573b9d4a47fa1cff70e601ee2cc88bda","modified":1599903241808},{"_id":"public/tags/安装手册/index.html","hash":"bb4cb7ad393c61372da3bf41c57a1d8cd4940c74","modified":1599903241808},{"_id":"public/tags/Mybatis/index.html","hash":"95d04417e4d448168492617952cdfe9518b59310","modified":1599903241808},{"_id":"public/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1599616454003},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1599616454003},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1599616454003},{"_id":"public/img/icp.png","hash":"cb1fd69b38ec23ce8366668ddffbbd0160de0104","modified":1599616454003},{"_id":"public/img/loading.gif","hash":"5f0287fb8fb98872fe1998c6f781111819e71806","modified":1599616454003},{"_id":"public/css/blog-encrypt.css","hash":"22e25b0d16ea053d25eb971e038c817a4c9cb584","modified":1599616454003},{"_id":"public/lib/blog-encrypt.js","hash":"91fda12d550323056762c5408623eb8a1d201ecc","modified":1599616454003},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1599616454003},{"_id":"public/js/utils.js","hash":"ad37327c20e4b2ef63b33ee815da96f7a4a00a2a","modified":1599616454003},{"_id":"public/js/search/algolia.js","hash":"99bc7ef172e9af332d652e92c5ec8b9ec1481434","modified":1599616454003},{"_id":"public/js/search/local-search.js","hash":"591c1a91601287ab6d21e90bebf697792c785c10","modified":1599616454003},{"_id":"public/js/third-party/ClickShowText.js","hash":"32864aee35b5d739a36702b8d916b17bac52b17e","modified":1599616454003},{"_id":"public/js/third-party/activate-power-mode.js","hash":"2c4ab494225b7d04eed934efc43a43791e596f4a","modified":1599616454003},{"_id":"public/js/third-party/canvas-nest.js","hash":"38cb4f2b025f6354124dadb69fe0e0ce57d35094","modified":1599616454003},{"_id":"public/js/third-party/canvas-ribbon.js","hash":"1ddf4f6896175e77518f0fbd45776132b2954fb6","modified":1599616454003},{"_id":"public/js/third-party/click_heart.js","hash":"004ea645ed8c5e354711b5fc0dbfe015e181916b","modified":1599616454003},{"_id":"public/js/third-party/fireworks.js","hash":"411ced4031a856a5b87f7c62d3800027d12bacec","modified":1599616454003},{"_id":"public/js/third-party/piao.js","hash":"8846788202ee4ad18a814fa492ac39bb7f09548a","modified":1599616454003},{"_id":"public/css/var.css","hash":"4c8c586b6bf5ff38558aed10fbb9f4d36eebd5ad","modified":1599616454003},{"_id":"public/css/index.css","hash":"94a4a9875401ccba4f8e752e98cf7de3fdef33f4","modified":1599616454003},{"_id":"public/js/main.js","hash":"de6c0810af70b6773fffef61e8abcc8f2db752ab","modified":1599616454003},{"_id":"public/js/tw_cn.js","hash":"6d5aaa12b9afca692165c88ef76ace308ac1c8c2","modified":1599616454003},{"_id":"public/js/sakura.js","hash":"c10e1b69c5f122fa748270bca5df5a3ffc8db0da","modified":1599616454003},{"_id":"source/CNAME","hash":"24f0dbcec3eb907f32829377c83fd9cd1546ed42","modified":1599891984426},{"_id":"source/.travis 1.yml","hash":"1355cae1840048ff9e4f59a215ba0717e9b3a899","modified":1599895880956},{"_id":"source/.travis.yml","hash":"1355cae1840048ff9e4f59a215ba0717e9b3a899","modified":1599895880956},{"_id":"public/CNAME","hash":"24f0dbcec3eb907f32829377c83fd9cd1546ed42","modified":1599902795906}],"Category":[{"name":"Gitlab","_id":"ckeuqc46g0004ee7jeyvc8slc"}],"Data":[{"_id":"link","data":[{"class_name":null,"class_desc":"朋友圈 ———— 花径不曾缘客扫，蓬门今始为君开","link_list":[{"name":"Xu’s Blog","link":"https://hasaik.com","avatar":"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/site/link/xuxu_icon.jpg","descr":"简单不先于复杂，而是在复杂之后"},{"name":"Yuning’s Blog","link":"https://yuning.life","avatar":"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/site/link/Yuning_avatar.jpg","descr":"懒人没有左右铭~"}]},{"class_name":null,"class_desc":"技术大拿 ———— 没有不劳而获的工作，更没有坐享其成的收获","link_list":[{"name":"小康博客","link":"https://www.antmoe.com/","avatar":"https://cdn.jsdelivr.net/gh/XuxuGood/cdn@master/blogImages/links/小康博客.jpg","descr":"一个收藏回忆与分享技术的地方"}]},{"class_name":null,"class_desc":"使用工具","link_list":[{"name":"TinyPNG","link":"https://tinypng.com/","avatar":"https://cdn.jsdelivr.net/gh/XuxuGood/cdn@master/blogImages/tools/tinypng.png","descr":"图片在线压缩"},{"name":"Itemo","link":"https://webgradients.com/","avatar":"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/site/link/itmeo_icon.jpg","descr":"多种多样的渐变色"},{"name":"Easyicon","link":"https://www.easyicon.net/","avatar":"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/site/link/easy_icon.png","descr":"图标下载库"},{"name":"WallpaperAccess","link":"https://wallpaperaccess.com/","avatar":"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/site/link/wallpaperaccess_icon.png","descr":"高清图片"},{"name":"彼岸图库","link":"http://pic.netbian.com/","avatar":"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/site/link/bian_icon.png","descr":"超清壁纸"},{"name":"搞定抠图","link":"https://www.gaoding.com/koutu","avatar":"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/site/link/gaoding_icon.png","descr":"免费在线抠图"},{"name":"Iconfont","link":"https://www.iconfont.cn/","avatar":"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/site/link/iconfont.png","descr":"阿里矢量图标库"},{"name":"Flaticon","link":"https://www.flaticon.com/","avatar":"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/site/link/flaticon.png","descr":"超好看的图标库"},{"name":"Font Awesome","link":"https://fontawesome.com/","avatar":"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/site/link/fontawesome.png","descr":"图标字体库"},{"name":"Linux 命令搜索","link":"http://www.atoolbox.net/Tool.php?Id=826","avatar":"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/site/link/linux_icon.png","descr":"Linux 命令行帮助查询"}]}]}],"Page":[{"title":"background-photo","date":"2020-09-09T09:26:06.000Z","type":"背景图","top_img":"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/site/pkq_bg.png","_content":"{% gallery %}\n![pkq_bg](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/photo/background-photo/pkq_bg.png)\n{% endgallery %}\n","source":"background-photo/index.md","raw":"---\ntitle: background-photo\ndate: 2020-09-09 09:26:06\ntype: \"背景图\"\ntop_img: https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/site/pkq_bg.png\n---\n{% gallery %}\n![pkq_bg](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/photo/background-photo/pkq_bg.png)\n{% endgallery %}\n","updated":"2020-09-12T09:33:30.344Z","path":"background-photo/index.html","comments":1,"layout":"page","_id":"ckezh2btd0000ut7j16qa0g6e","content":"<div class=\"justified-gallery\"><p><img src= \"/img/loading.gif\" data-lazy-src=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/photo/background-photo/pkq_bg.png\" alt=\"pkq_bg\"></p>\n          </div>\n","site":{"data":{}},"cover":"https://i.loli.net/2020/05/01/IuWi8QbHvzjlOPw.jpg","excerpt":"","more":"<div class=\"justified-gallery\"><p><img src=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/photo/background-photo/pkq_bg.png\" alt=\"pkq_bg\"></p>\n          </div>\n"},{"title":"分类","date":"2020-08-30T19:18:39.000Z","type":"categories","top_img":"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/site/bg_one.png","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2020-08-30 19:18:39\ntype: \"categories\"\ntop_img: https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/site/bg_one.png\n---\n","updated":"2020-09-12T09:33:30.344Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckezh2bti0002ut7je0h91ebg","content":"","site":{"data":{}},"cover":"https://i.loli.net/2020/05/01/IuWi8QbHvzjlOPw.jpg","excerpt":"","more":""},{"title":"友情链接","date":"2020-08-30T19:19:31.000Z","type":"link","top_img":"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/site/bg_one.png","_content":"","source":"link/index.md","raw":"---\ntitle: 友情链接\ndate: 2020-08-30 19:19:31\ntype: \"link\"\ntop_img: https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/site/bg_one.png\n---\n","updated":"2020-09-12T09:33:30.344Z","path":"link/index.html","comments":1,"layout":"page","_id":"ckezh2btn0005ut7jdq7e1xuh","content":"","site":{"data":{}},"cover":"https://i.loli.net/2020/05/01/IuWi8QbHvzjlOPw.jpg","excerpt":"","more":""},{"title":"相册","date":"2020-08-30T19:19:31.000Z","type":"photos","top_img":"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/site/pkq_bg.png","_content":"<div class=\"gallery-group-main\">\n  {% galleryGroup '壁纸' '收藏的一些壁纸' '/background-photo' https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png %} \n  {% galleryGroup '漫威' '关于漫威的图片' '/Gallery/marvel' https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg %} \n</div>\n","source":"photos/index.md","raw":"---\ntitle: 相册\ndate: 2020-08-30 19:19:31\ntype: \"photos\"\ntop_img: https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/site/pkq_bg.png\n---\n<div class=\"gallery-group-main\">\n  {% galleryGroup '壁纸' '收藏的一些壁纸' '/background-photo' https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png %} \n  {% galleryGroup '漫威' '关于漫威的图片' '/Gallery/marvel' https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg %} \n</div>\n","updated":"2020-09-12T09:33:30.345Z","path":"photos/index.html","comments":1,"layout":"page","_id":"ckezh2bto0007ut7jehxrew5a","content":"<div class=\"gallery-group-main\">\n  \n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img\" src= \"/img/loading.gif\" data-lazy-src='https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png'>\n  <figcaption>\n  <div class=\"gallery-group-name\">壁纸</div>\n  <p>收藏的一些壁纸</p>\n  <a href='/background-photo'></a>\n  </figcaption>\n  </figure>\n   \n  \n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img\" src= \"/img/loading.gif\" data-lazy-src='https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg'>\n  <figcaption>\n  <div class=\"gallery-group-name\">漫威</div>\n  <p>关于漫威的图片</p>\n  <a href='/Gallery/marvel'></a>\n  </figcaption>\n  </figure>\n   \n</div>\n","site":{"data":{}},"cover":"https://i.loli.net/2020/05/01/IuWi8QbHvzjlOPw.jpg","excerpt":"","more":"<div class=\"gallery-group-main\">\n  \n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img\" src='https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png'>\n  <figcaption>\n  <div class=\"gallery-group-name\">壁纸</div>\n  <p>收藏的一些壁纸</p>\n  <a href='/background-photo'></a>\n  </figcaption>\n  </figure>\n   \n  \n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img\" src='https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg'>\n  <figcaption>\n  <div class=\"gallery-group-name\">漫威</div>\n  <p>关于漫威的图片</p>\n  <a href='/Gallery/marvel'></a>\n  </figcaption>\n  </figure>\n   \n</div>\n"},{"title":"标签","date":"2020-08-30T19:14:39.000Z","type":"tags","top_img":"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/site/bg_one.png","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2020-08-30 19:14:39\ntype: \"tags\"\ntop_img: https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/site/bg_one.png\n---\n","updated":"2020-09-12T09:33:30.346Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckezh2btp000aut7jershh2ks","content":"","site":{"data":{}},"cover":"https://i.loli.net/2020/05/01/IuWi8QbHvzjlOPw.jpg","excerpt":"","more":""},{"title":"推荐网站","date":"2020-09-02T16:51:44.000Z","type":"tools","top_img":"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/site/bg_one.png","_content":"<div class=\"flink-desc\" style=\"margin-bottom: 20px;\">推荐网站</div>\n{% sitegroup %}\n{% site 力扣, url=https://leetcode-cn.com/, screenshot=https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/site/tools/likou.png, avatar=https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/site/tools/likou_icon.png, description=程序员的学习网站 %}\n{% site 学习JDK8, url=https://lingcoder.gitee.io/onjava8/#/sidebar, screenshot=https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/site/tools/onjava8.png, avatar=https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/site/tools/jdk_icon.png, description=《On Java8》中文版 %}\n{% endsitegroup %}\n","source":"tools/index.md","raw":"---\ntitle: 推荐网站\ndate: 2020-09-02 16:51:44\ntype: \"tools\"\ntop_img: https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/site/bg_one.png\n---\n<div class=\"flink-desc\" style=\"margin-bottom: 20px;\">推荐网站</div>\n{% sitegroup %}\n{% site 力扣, url=https://leetcode-cn.com/, screenshot=https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/site/tools/likou.png, avatar=https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/site/tools/likou_icon.png, description=程序员的学习网站 %}\n{% site 学习JDK8, url=https://lingcoder.gitee.io/onjava8/#/sidebar, screenshot=https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/site/tools/onjava8.png, avatar=https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/site/tools/jdk_icon.png, description=《On Java8》中文版 %}\n{% endsitegroup %}\n","updated":"2020-09-12T09:33:30.346Z","path":"tools/index.html","comments":1,"layout":"page","_id":"ckezh2btp000but7jf3ebgx3k","content":"<div class=\"flink-desc\" style=\"margin-bottom: 20px;\">推荐网站</div>\n<div class=\"site-card-group\"><a class=\"site-card\" href=\"https://leetcode-cn.com/\"><div class=\"img\"><img src= \"/img/loading.gif\" data-lazy-src=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/site/tools/likou.png\"/></div><div class=\"info\"><img src= \"/img/loading.gif\" data-lazy-src=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/site/tools/likou_icon.png\"/><span class=\"title\">力扣</span><span class=\"desc\">程序员的学习网站</span></div></a>\n<a class=\"site-card\" href=\"https://lingcoder.gitee.io/onjava8/#/sidebar\"><div class=\"img\"><img src= \"/img/loading.gif\" data-lazy-src=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/site/tools/onjava8.png\"/></div><div class=\"info\"><img src= \"/img/loading.gif\" data-lazy-src=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/site/tools/jdk_icon.png\"/><span class=\"title\">学习JDK8</span><span class=\"desc\">《On Java8》中文版</span></div></a></div>\n","site":{"data":{}},"cover":"https://i.loli.net/2020/05/01/IuWi8QbHvzjlOPw.jpg","excerpt":"","more":"<div class=\"flink-desc\" style=\"margin-bottom: 20px;\">推荐网站</div>\n<div class=\"site-card-group\"><a class=\"site-card\" href=\"https://leetcode-cn.com/\"><div class=\"img\"><img src=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/site/tools/likou.png\"/></div><div class=\"info\"><img src=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/site/tools/likou_icon.png\"/><span class=\"title\">力扣</span><span class=\"desc\">程序员的学习网站</span></div></a>\n<a class=\"site-card\" href=\"https://lingcoder.gitee.io/onjava8/#/sidebar\"><div class=\"img\"><img src=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/site/tools/onjava8.png\"/></div><div class=\"info\"><img src=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/site/tools/jdk_icon.png\"/><span class=\"title\">学习JDK8</span><span class=\"desc\">《On Java8》中文版</span></div></a></div>\n"}],"Post":[{"title":"CentOS7中搭建Gitlab","created":"2020-05-24T16:00:00.000Z","abbrlink":"202005250941","cover":"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/cover.png","top_img":"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/top_img.png","description":"每次搭建Gitlab都要百度寻找搭建步骤，修改端口容易忘记端口占用的问题导致修改失败，所以记录一次稍微详细的搭建步骤方便以后使用。","_content":"# CentOS搭建Gitlab的详细教程\n\n记录一次CentOS搭建gitlab服务器的经历。\n\n## 前期准备\n\n1. 服务器：CentOS7\n2. 安装文件：[gitlab-ce-12.6.3-ce.0.el7.x86_64.rpm](https://packages.gitlab.com/gitlab/gitlab-ce/packages/el/7/gitlab-ce-12.6.3-ce.0.el7.x86_64.rpm)\n\n## 安装gitlab\n\n介绍一下两种安装方式 yum安装、rmp安装。\n\n### yum安装\n\n这里直接参考[官网](https://about.gitlab.com/install/#centos-7)安装教程\n\n[![gitlab安装教程](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509411.png)](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941-0/2020052509411.png)\n\n\n\n打开linux系统终端，首先安装gitlab必须的ssh，以及在系统防火墙中打开HTTP、HTTPS和SSH访问。\n\n```\nsudo yum install -y curl policycoreutils-python openssh-server\nsudo systemctl enable sshd\nsudo systemctl start sshd\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo systemctl reload firewalld\n```\n\n然后是安装发送邮件功能的postfix\n\n```\nsudo yum install postfix\nsudo systemctl enable postfix\nsudo systemctl start postfix\n```\n\n添加gitlab的包仓库（ee改成ce）\n\n```\ncurl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash\n```\n\n安装gitlab（EXTERNAL_URL指的是你的gitlab访问地址，这里改为http://+你的linux系统ip）\n\n```\nsudo EXTERNAL_URL=\"http://当前系统的ip或域名\" yum install -y gitlab-ce\n```\n\n### rpm安装\n\n使用官网的安装方式下载很慢，这里可以直接下载rmp安装包手动安装。\n\n首先去[官网安装包仓库](https://packages.gitlab.com/gitlab/gitlab-ce/)下载我们所需的安装包版本\n\n[![官网安装包仓库](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509412.png)](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941-0/2020052509412.png)\n\n下载完成之后将文件拷贝至你的linux服务器，同样需要配置ssh、防火墙、postfix，\n\n```\n//安装gitlab必须的ssh，以及在系统防火墙中打开HTTP、HTTPS和SSH访问。\nsudo yum install -y curl policycoreutils-python openssh-server\nsudo systemctl enable sshd\nsudo systemctl start sshd\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo systemctl reload firewalld\n//安装发送邮件功能的postfix\nsudo yum install postfix\nsudo systemctl enable postfix\nsudo systemctl start postfix\n```\n\n然后cd进入你的安装包路径进行安装\n\n```\n//安装 example.rpm 包并在安装过程中显示正在安装的文件信息及安装进度\nrpm -ivh example.rpm\n```\n\n出现下图即为安装成功\n\n[![安装成功图](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509413.png)](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509413.png)\n\n这种方式需要我们手动进入配置文件中修改访问地址\n\n```\nsudo vim /etc/gitlab/gitlab.rb\n\n//修改文件中external_url 'http://你linux的ip或域名'\n```\n\n并且我们还需要修改默认的gitlab clone地址，要不每次都得自己修改\n\n[![img](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509414.png)](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509414.png)\n\n修改文件配置\n\n```\nsudo vim /opt/gitlab/embedded/service/gitlab-rails/config/gitlab.yml\n```\n\n将图片上标红处的Host替换成你的域名或ip\n\n[![img](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509415.png)](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509415.png)\n\n## 访问\n\n重置并启动GitLab，执行以下命令\n\n```\ngitlab-ctl reconfigure\n\ngitlab-ctl restart\n```\n\n提示 \"ok: run:\"表示启动成功\n\n[![img](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509416.png)](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509416.png)\n\n然后浏览器上输入你的访问地址（第一次访问会让你输入新密码，用户名默认为root）\n\n[![img](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509417.png)](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509417.png)\n\n## 修改访问端口\n\n由于unicorn默认使用的是 `8080` 端口，打开 `/etc/gitlab/gitlab.rb` ，打开 `# unicorn['port'] = 8080` 的注释，将 `8080` 修改为 `9999` ，保存后运行 `sudo gitlab-ctl reconfigure` 即可(该端口不可与上方修改的端口一致)。\n\n## 安装过程中遇到的问题\n\n1. 在浏览器中访问GitLab出现502错误：\n   原因：内存不足。\n   解决办法：检查系统的虚拟内存是否随机启动了，如果系统无虚拟内存，则增加虚拟内存，再重新启动系统。\n","source":"_posts/CentOS搭建GitLab服务器.md","raw":"---\ntitle: CentOS7中搭建Gitlab\ntags: [Gitlab, 安装手册]\ncategories: [Gitlab]\ncreated: 2020-05-25\nabbrlink: '202005250941'\ncover: https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/cover.png\ntop_img: https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/top_img.png\ndescription: 每次搭建Gitlab都要百度寻找搭建步骤，修改端口容易忘记端口占用的问题导致修改失败，所以记录一次稍微详细的搭建步骤方便以后使用。\n---\n# CentOS搭建Gitlab的详细教程\n\n记录一次CentOS搭建gitlab服务器的经历。\n\n## 前期准备\n\n1. 服务器：CentOS7\n2. 安装文件：[gitlab-ce-12.6.3-ce.0.el7.x86_64.rpm](https://packages.gitlab.com/gitlab/gitlab-ce/packages/el/7/gitlab-ce-12.6.3-ce.0.el7.x86_64.rpm)\n\n## 安装gitlab\n\n介绍一下两种安装方式 yum安装、rmp安装。\n\n### yum安装\n\n这里直接参考[官网](https://about.gitlab.com/install/#centos-7)安装教程\n\n[![gitlab安装教程](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509411.png)](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941-0/2020052509411.png)\n\n\n\n打开linux系统终端，首先安装gitlab必须的ssh，以及在系统防火墙中打开HTTP、HTTPS和SSH访问。\n\n```\nsudo yum install -y curl policycoreutils-python openssh-server\nsudo systemctl enable sshd\nsudo systemctl start sshd\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo systemctl reload firewalld\n```\n\n然后是安装发送邮件功能的postfix\n\n```\nsudo yum install postfix\nsudo systemctl enable postfix\nsudo systemctl start postfix\n```\n\n添加gitlab的包仓库（ee改成ce）\n\n```\ncurl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash\n```\n\n安装gitlab（EXTERNAL_URL指的是你的gitlab访问地址，这里改为http://+你的linux系统ip）\n\n```\nsudo EXTERNAL_URL=\"http://当前系统的ip或域名\" yum install -y gitlab-ce\n```\n\n### rpm安装\n\n使用官网的安装方式下载很慢，这里可以直接下载rmp安装包手动安装。\n\n首先去[官网安装包仓库](https://packages.gitlab.com/gitlab/gitlab-ce/)下载我们所需的安装包版本\n\n[![官网安装包仓库](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509412.png)](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941-0/2020052509412.png)\n\n下载完成之后将文件拷贝至你的linux服务器，同样需要配置ssh、防火墙、postfix，\n\n```\n//安装gitlab必须的ssh，以及在系统防火墙中打开HTTP、HTTPS和SSH访问。\nsudo yum install -y curl policycoreutils-python openssh-server\nsudo systemctl enable sshd\nsudo systemctl start sshd\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo systemctl reload firewalld\n//安装发送邮件功能的postfix\nsudo yum install postfix\nsudo systemctl enable postfix\nsudo systemctl start postfix\n```\n\n然后cd进入你的安装包路径进行安装\n\n```\n//安装 example.rpm 包并在安装过程中显示正在安装的文件信息及安装进度\nrpm -ivh example.rpm\n```\n\n出现下图即为安装成功\n\n[![安装成功图](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509413.png)](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509413.png)\n\n这种方式需要我们手动进入配置文件中修改访问地址\n\n```\nsudo vim /etc/gitlab/gitlab.rb\n\n//修改文件中external_url 'http://你linux的ip或域名'\n```\n\n并且我们还需要修改默认的gitlab clone地址，要不每次都得自己修改\n\n[![img](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509414.png)](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509414.png)\n\n修改文件配置\n\n```\nsudo vim /opt/gitlab/embedded/service/gitlab-rails/config/gitlab.yml\n```\n\n将图片上标红处的Host替换成你的域名或ip\n\n[![img](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509415.png)](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509415.png)\n\n## 访问\n\n重置并启动GitLab，执行以下命令\n\n```\ngitlab-ctl reconfigure\n\ngitlab-ctl restart\n```\n\n提示 \"ok: run:\"表示启动成功\n\n[![img](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509416.png)](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509416.png)\n\n然后浏览器上输入你的访问地址（第一次访问会让你输入新密码，用户名默认为root）\n\n[![img](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509417.png)](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509417.png)\n\n## 修改访问端口\n\n由于unicorn默认使用的是 `8080` 端口，打开 `/etc/gitlab/gitlab.rb` ，打开 `# unicorn['port'] = 8080` 的注释，将 `8080` 修改为 `9999` ，保存后运行 `sudo gitlab-ctl reconfigure` 即可(该端口不可与上方修改的端口一致)。\n\n## 安装过程中遇到的问题\n\n1. 在浏览器中访问GitLab出现502错误：\n   原因：内存不足。\n   解决办法：检查系统的虚拟内存是否随机启动了，如果系统无虚拟内存，则增加虚拟内存，再重新启动系统。\n","slug":"CentOS搭建GitLab服务器","published":1,"date":"2020-09-12T09:33:30.342Z","updated":"2020-09-12T09:33:30.343Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckezh2btf0001ut7jbv5kg6w7","content":"<h1 id=\"CentOS搭建Gitlab的详细教程\"><a href=\"#CentOS搭建Gitlab的详细教程\" class=\"headerlink\" title=\"CentOS搭建Gitlab的详细教程\"></a>CentOS搭建Gitlab的详细教程</h1><p>记录一次CentOS搭建gitlab服务器的经历。</p>\n<h2 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h2><ol>\n<li>服务器：CentOS7</li>\n<li>安装文件：<a href=\"https://packages.gitlab.com/gitlab/gitlab-ce/packages/el/7/gitlab-ce-12.6.3-ce.0.el7.x86_64.rpm\">gitlab-ce-12.6.3-ce.0.el7.x86_64.rpm</a></li>\n</ol>\n<h2 id=\"安装gitlab\"><a href=\"#安装gitlab\" class=\"headerlink\" title=\"安装gitlab\"></a>安装gitlab</h2><p>介绍一下两种安装方式 yum安装、rmp安装。</p>\n<h3 id=\"yum安装\"><a href=\"#yum安装\" class=\"headerlink\" title=\"yum安装\"></a>yum安装</h3><p>这里直接参考<a href=\"https://about.gitlab.com/install/#centos-7\">官网</a>安装教程</p>\n<p><a href=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941-0/2020052509411.png\"><img src= \"/img/loading.gif\" data-lazy-src=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509411.png\" alt=\"gitlab安装教程\"></a></p>\n<p>打开linux系统终端，首先安装gitlab必须的ssh，以及在系统防火墙中打开HTTP、HTTPS和SSH访问。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y curl policycoreutils-python openssh-server</span><br><span class=\"line\">sudo systemctl enable sshd</span><br><span class=\"line\">sudo systemctl start sshd</span><br><span class=\"line\">sudo firewall-cmd --permanent --add-service&#x3D;http</span><br><span class=\"line\">sudo firewall-cmd --permanent --add-service&#x3D;https</span><br><span class=\"line\">sudo systemctl reload firewalld</span><br></pre></td></tr></table></figure>\n\n<p>然后是安装发送邮件功能的postfix</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install postfix</span><br><span class=\"line\">sudo systemctl enable postfix</span><br><span class=\"line\">sudo systemctl start postfix</span><br></pre></td></tr></table></figure>\n\n<p>添加gitlab的包仓库（ee改成ce）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl https:&#x2F;&#x2F;packages.gitlab.com&#x2F;install&#x2F;repositories&#x2F;gitlab&#x2F;gitlab-ce&#x2F;script.rpm.sh | sudo bash</span><br></pre></td></tr></table></figure>\n\n<p>安装gitlab（EXTERNAL_URL指的是你的gitlab访问地址，这里改为http://+你的linux系统ip）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo EXTERNAL_URL&#x3D;&quot;http:&#x2F;&#x2F;当前系统的ip或域名&quot; yum install -y gitlab-ce</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"rpm安装\"><a href=\"#rpm安装\" class=\"headerlink\" title=\"rpm安装\"></a>rpm安装</h3><p>使用官网的安装方式下载很慢，这里可以直接下载rmp安装包手动安装。</p>\n<p>首先去<a href=\"https://packages.gitlab.com/gitlab/gitlab-ce/\">官网安装包仓库</a>下载我们所需的安装包版本</p>\n<p><a href=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941-0/2020052509412.png\"><img src= \"/img/loading.gif\" data-lazy-src=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509412.png\" alt=\"官网安装包仓库\"></a></p>\n<p>下载完成之后将文件拷贝至你的linux服务器，同样需要配置ssh、防火墙、postfix，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;安装gitlab必须的ssh，以及在系统防火墙中打开HTTP、HTTPS和SSH访问。</span><br><span class=\"line\">sudo yum install -y curl policycoreutils-python openssh-server</span><br><span class=\"line\">sudo systemctl enable sshd</span><br><span class=\"line\">sudo systemctl start sshd</span><br><span class=\"line\">sudo firewall-cmd --permanent --add-service&#x3D;http</span><br><span class=\"line\">sudo firewall-cmd --permanent --add-service&#x3D;https</span><br><span class=\"line\">sudo systemctl reload firewalld</span><br><span class=\"line\">&#x2F;&#x2F;安装发送邮件功能的postfix</span><br><span class=\"line\">sudo yum install postfix</span><br><span class=\"line\">sudo systemctl enable postfix</span><br><span class=\"line\">sudo systemctl start postfix</span><br></pre></td></tr></table></figure>\n\n<p>然后cd进入你的安装包路径进行安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;安装 example.rpm 包并在安装过程中显示正在安装的文件信息及安装进度</span><br><span class=\"line\">rpm -ivh example.rpm</span><br></pre></td></tr></table></figure>\n\n<p>出现下图即为安装成功</p>\n<p><a href=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509413.png\"><img src= \"/img/loading.gif\" data-lazy-src=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509413.png\" alt=\"安装成功图\"></a></p>\n<p>这种方式需要我们手动进入配置文件中修改访问地址</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim &#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;修改文件中external_url &#39;http:&#x2F;&#x2F;你linux的ip或域名&#39;</span><br></pre></td></tr></table></figure>\n\n<p>并且我们还需要修改默认的gitlab clone地址，要不每次都得自己修改</p>\n<p><a href=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509414.png\"><img src= \"/img/loading.gif\" data-lazy-src=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509414.png\" alt=\"img\"></a></p>\n<p>修改文件配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim &#x2F;opt&#x2F;gitlab&#x2F;embedded&#x2F;service&#x2F;gitlab-rails&#x2F;config&#x2F;gitlab.yml</span><br></pre></td></tr></table></figure>\n\n<p>将图片上标红处的Host替换成你的域名或ip</p>\n<p><a href=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509415.png\"><img src= \"/img/loading.gif\" data-lazy-src=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509415.png\" alt=\"img\"></a></p>\n<h2 id=\"访问\"><a href=\"#访问\" class=\"headerlink\" title=\"访问\"></a>访问</h2><p>重置并启动GitLab，执行以下命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitlab-ctl reconfigure</span><br><span class=\"line\"></span><br><span class=\"line\">gitlab-ctl restart</span><br></pre></td></tr></table></figure>\n\n<p>提示 “ok: run:”表示启动成功</p>\n<p><a href=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509416.png\"><img src= \"/img/loading.gif\" data-lazy-src=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509416.png\" alt=\"img\"></a></p>\n<p>然后浏览器上输入你的访问地址（第一次访问会让你输入新密码，用户名默认为root）</p>\n<p><a href=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509417.png\"><img src= \"/img/loading.gif\" data-lazy-src=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509417.png\" alt=\"img\"></a></p>\n<h2 id=\"修改访问端口\"><a href=\"#修改访问端口\" class=\"headerlink\" title=\"修改访问端口\"></a>修改访问端口</h2><p>由于unicorn默认使用的是 <code>8080</code> 端口，打开 <code>/etc/gitlab/gitlab.rb</code> ，打开 <code># unicorn[&#39;port&#39;] = 8080</code> 的注释，将 <code>8080</code> 修改为 <code>9999</code> ，保存后运行 <code>sudo gitlab-ctl reconfigure</code> 即可(该端口不可与上方修改的端口一致)。</p>\n<h2 id=\"安装过程中遇到的问题\"><a href=\"#安装过程中遇到的问题\" class=\"headerlink\" title=\"安装过程中遇到的问题\"></a>安装过程中遇到的问题</h2><ol>\n<li>在浏览器中访问GitLab出现502错误：<br>原因：内存不足。<br>解决办法：检查系统的虚拟内存是否随机启动了，如果系统无虚拟内存，则增加虚拟内存，再重新启动系统。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"CentOS搭建Gitlab的详细教程\"><a href=\"#CentOS搭建Gitlab的详细教程\" class=\"headerlink\" title=\"CentOS搭建Gitlab的详细教程\"></a>CentOS搭建Gitlab的详细教程</h1><p>记录一次CentOS搭建gitlab服务器的经历。</p>\n<h2 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h2><ol>\n<li>服务器：CentOS7</li>\n<li>安装文件：<a href=\"https://packages.gitlab.com/gitlab/gitlab-ce/packages/el/7/gitlab-ce-12.6.3-ce.0.el7.x86_64.rpm\">gitlab-ce-12.6.3-ce.0.el7.x86_64.rpm</a></li>\n</ol>\n<h2 id=\"安装gitlab\"><a href=\"#安装gitlab\" class=\"headerlink\" title=\"安装gitlab\"></a>安装gitlab</h2><p>介绍一下两种安装方式 yum安装、rmp安装。</p>\n<h3 id=\"yum安装\"><a href=\"#yum安装\" class=\"headerlink\" title=\"yum安装\"></a>yum安装</h3><p>这里直接参考<a href=\"https://about.gitlab.com/install/#centos-7\">官网</a>安装教程</p>\n<p><a href=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941-0/2020052509411.png\"><img src=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509411.png\" alt=\"gitlab安装教程\"></a></p>\n<p>打开linux系统终端，首先安装gitlab必须的ssh，以及在系统防火墙中打开HTTP、HTTPS和SSH访问。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y curl policycoreutils-python openssh-server</span><br><span class=\"line\">sudo systemctl enable sshd</span><br><span class=\"line\">sudo systemctl start sshd</span><br><span class=\"line\">sudo firewall-cmd --permanent --add-service&#x3D;http</span><br><span class=\"line\">sudo firewall-cmd --permanent --add-service&#x3D;https</span><br><span class=\"line\">sudo systemctl reload firewalld</span><br></pre></td></tr></table></figure>\n\n<p>然后是安装发送邮件功能的postfix</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install postfix</span><br><span class=\"line\">sudo systemctl enable postfix</span><br><span class=\"line\">sudo systemctl start postfix</span><br></pre></td></tr></table></figure>\n\n<p>添加gitlab的包仓库（ee改成ce）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl https:&#x2F;&#x2F;packages.gitlab.com&#x2F;install&#x2F;repositories&#x2F;gitlab&#x2F;gitlab-ce&#x2F;script.rpm.sh | sudo bash</span><br></pre></td></tr></table></figure>\n\n<p>安装gitlab（EXTERNAL_URL指的是你的gitlab访问地址，这里改为http://+你的linux系统ip）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo EXTERNAL_URL&#x3D;&quot;http:&#x2F;&#x2F;当前系统的ip或域名&quot; yum install -y gitlab-ce</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"rpm安装\"><a href=\"#rpm安装\" class=\"headerlink\" title=\"rpm安装\"></a>rpm安装</h3><p>使用官网的安装方式下载很慢，这里可以直接下载rmp安装包手动安装。</p>\n<p>首先去<a href=\"https://packages.gitlab.com/gitlab/gitlab-ce/\">官网安装包仓库</a>下载我们所需的安装包版本</p>\n<p><a href=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941-0/2020052509412.png\"><img src=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509412.png\" alt=\"官网安装包仓库\"></a></p>\n<p>下载完成之后将文件拷贝至你的linux服务器，同样需要配置ssh、防火墙、postfix，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;安装gitlab必须的ssh，以及在系统防火墙中打开HTTP、HTTPS和SSH访问。</span><br><span class=\"line\">sudo yum install -y curl policycoreutils-python openssh-server</span><br><span class=\"line\">sudo systemctl enable sshd</span><br><span class=\"line\">sudo systemctl start sshd</span><br><span class=\"line\">sudo firewall-cmd --permanent --add-service&#x3D;http</span><br><span class=\"line\">sudo firewall-cmd --permanent --add-service&#x3D;https</span><br><span class=\"line\">sudo systemctl reload firewalld</span><br><span class=\"line\">&#x2F;&#x2F;安装发送邮件功能的postfix</span><br><span class=\"line\">sudo yum install postfix</span><br><span class=\"line\">sudo systemctl enable postfix</span><br><span class=\"line\">sudo systemctl start postfix</span><br></pre></td></tr></table></figure>\n\n<p>然后cd进入你的安装包路径进行安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;安装 example.rpm 包并在安装过程中显示正在安装的文件信息及安装进度</span><br><span class=\"line\">rpm -ivh example.rpm</span><br></pre></td></tr></table></figure>\n\n<p>出现下图即为安装成功</p>\n<p><a href=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509413.png\"><img src=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509413.png\" alt=\"安装成功图\"></a></p>\n<p>这种方式需要我们手动进入配置文件中修改访问地址</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim &#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;修改文件中external_url &#39;http:&#x2F;&#x2F;你linux的ip或域名&#39;</span><br></pre></td></tr></table></figure>\n\n<p>并且我们还需要修改默认的gitlab clone地址，要不每次都得自己修改</p>\n<p><a href=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509414.png\"><img src=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509414.png\" alt=\"img\"></a></p>\n<p>修改文件配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim &#x2F;opt&#x2F;gitlab&#x2F;embedded&#x2F;service&#x2F;gitlab-rails&#x2F;config&#x2F;gitlab.yml</span><br></pre></td></tr></table></figure>\n\n<p>将图片上标红处的Host替换成你的域名或ip</p>\n<p><a href=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509415.png\"><img src=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509415.png\" alt=\"img\"></a></p>\n<h2 id=\"访问\"><a href=\"#访问\" class=\"headerlink\" title=\"访问\"></a>访问</h2><p>重置并启动GitLab，执行以下命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitlab-ctl reconfigure</span><br><span class=\"line\"></span><br><span class=\"line\">gitlab-ctl restart</span><br></pre></td></tr></table></figure>\n\n<p>提示 “ok: run:”表示启动成功</p>\n<p><a href=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509416.png\"><img src=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509416.png\" alt=\"img\"></a></p>\n<p>然后浏览器上输入你的访问地址（第一次访问会让你输入新密码，用户名默认为root）</p>\n<p><a href=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509417.png\"><img src=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509417.png\" alt=\"img\"></a></p>\n<h2 id=\"修改访问端口\"><a href=\"#修改访问端口\" class=\"headerlink\" title=\"修改访问端口\"></a>修改访问端口</h2><p>由于unicorn默认使用的是 <code>8080</code> 端口，打开 <code>/etc/gitlab/gitlab.rb</code> ，打开 <code># unicorn[&#39;port&#39;] = 8080</code> 的注释，将 <code>8080</code> 修改为 <code>9999</code> ，保存后运行 <code>sudo gitlab-ctl reconfigure</code> 即可(该端口不可与上方修改的端口一致)。</p>\n<h2 id=\"安装过程中遇到的问题\"><a href=\"#安装过程中遇到的问题\" class=\"headerlink\" title=\"安装过程中遇到的问题\"></a>安装过程中遇到的问题</h2><ol>\n<li>在浏览器中访问GitLab出现502错误：<br>原因：内存不足。<br>解决办法：检查系统的虚拟内存是否随机启动了，如果系统无虚拟内存，则增加虚拟内存，再重新启动系统。</li>\n</ol>\n"},{"title":"Mybatis学习总结","date":"2020-09-04T15:45:40.000Z","Categories":["Mybatis"],"created":"2020-05-24T16:00:00.000Z","abbrlink":"202006030942","description":"Mybatis的相关知识学习总结以及对整体的体系架构和工作流程的梳理，通过学习总结该部分内容深入理解该框架。","_content":"# Mybatis的介绍\n---\n## Mybatis的特性\n  + 使用连接池对连接进行管理\n  + SQL和代码分离,集中管理\n  + 参数可以映射并且可以写动态SQL\n  + 结果集映射\n  + 缓存管理\n  + 重复SQL可以提取重复使用\n  + 提供插件机制\n  \n## Mybatis的核心对象和其生命周期\n\n| 对象                     | 生命周期                    |\n| ------------------------ | --------------------------- |\n| SqlSeesionFactoryBuiler  | 方法局部 (method)           |\n| SqlSessionFactory (单例) | 应用级别 (application)      |\n| SqlSession               | 请求和操作 (request/method) |\n| Mapper                   | 方法 (method)               |\n\n## Mybatis的配置文件加载\n\n```java\nString resource = \"/mybatis-config.xml\";\nInputStream inputStream = Resources.getResourceAsStream(resource);\nSqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\n```\nMybatis会将配置文件加载到Configurition这个配置对象中(在SqlSessionFactoryBuilder中会对xml配置文件进行解析,并且通过XMLConfigBuilder对象将标签配置解析到Configuration对象中).\n```java\nprivate XMLConfigBuilder(XPathParser parser, String environment, Properties props) {\n    super(new Configuration());\n    this.localReflectorFactory = new DefaultReflectorFactory();\n    ErrorContext.instance().resource(\"SQL Mapper Configuration\");\n    this.configuration.setVariables(props);\n    this.parsed = false;\n    this.environment = environment;\n    this.parser = parser;\n}\n```\n\n## Mybatis的一些配置\n\n> TypeHandlers\n\nMybatis之所以可以将java类型与数据库类型进行转换是因为mybatis提供了大量的类型处理器(typeHandler),mybatis使用TypeHandlerRegistry对象去处理数据类型的对应,代码如下 :\n\n```java\npublic final class TypeHandlerRegistry {\n    private final Map<JdbcType, TypeHandler<?>> JDBC_TYPE_HANDLER_MAP = new EnumMap(JdbcType.class);\n    private final Map<Type, Map<JdbcType, TypeHandler<?>>> TYPE_HANDLER_MAP = new ConcurrentHashMap();\n    private final TypeHandler<Object> UNKNOWN_TYPE_HANDLER = new UnknownTypeHandler(this);\n    private final Map<Class<?>, TypeHandler<?>> ALL_TYPE_HANDLERS_MAP = new HashMap();\n    private static final Map<JdbcType, TypeHandler<?>> NULL_TYPE_HANDLER_MAP = new HashMap();\n\n    public TypeHandlerRegistry() {\n        this.register((Class)Boolean.class, (TypeHandler)(new BooleanTypeHandler()));\n        this.register((Class)Boolean.TYPE, (TypeHandler)(new BooleanTypeHandler()));\n        this.register((JdbcType)JdbcType.BOOLEAN, (TypeHandler)(new BooleanTypeHandler()));\n        this.register((JdbcType)JdbcType.BIT, (TypeHandler)(new BooleanTypeHandler()));\n        this.register((Class)Byte.class, (TypeHandler)(new ByteTypeHandler()));\n        this.register((Class)Byte.TYPE, (TypeHandler)(new ByteTypeHandler()));\n        this.register((JdbcType)JdbcType.TINYINT, (TypeHandler)(new ByteTypeHandler()));\n        this.register((Class)Short.class, (TypeHandler)(new ShortTypeHandler()));\n        this.register((Class)Short.TYPE, (TypeHandler)(new ShortTypeHandler()));\n        this.register((JdbcType)JdbcType.SMALLINT, (TypeHandler)(new ShortTypeHandler()));\n        this.register((Class)Integer.class, (TypeHandler)(new IntegerTypeHandler()));\n        this.register((Class)Integer.TYPE, (TypeHandler)(new IntegerTypeHandler()));\n        this.register((JdbcType)JdbcType.INTEGER, (TypeHandler)(new IntegerTypeHandler()));\n        this.register((Class)Long.class, (TypeHandler)(new LongTypeHandler()));\n        this.register((Class)Long.TYPE, (TypeHandler)(new LongTypeHandler()));\n        this.register((Class)Float.class, (TypeHandler)(new FloatTypeHandler()));\n        this.register((Class)Float.TYPE, (TypeHandler)(new FloatTypeHandler()));\n        this.register((JdbcType)JdbcType.FLOAT, (TypeHandler)(new FloatTypeHandler()));\n        this.register((Class)Double.class, (TypeHandler)(new DoubleTypeHandler()));\n        this.register((Class)Double.TYPE, (TypeHandler)(new DoubleTypeHandler()));\n        this.register((JdbcType)JdbcType.DOUBLE, (TypeHandler)(new DoubleTypeHandler()));\n        this.register((Class)Reader.class, (TypeHandler)(new ClobReaderTypeHandler()));\n        this.register((Class)String.class, (TypeHandler)(new StringTypeHandler()));\n        this.register((Class)String.class, JdbcType.CHAR, (TypeHandler)(new StringTypeHandler()));\n        this.register((Class)String.class, JdbcType.CLOB, (TypeHandler)(new ClobTypeHandler()));\n        this.register((Class)String.class, JdbcType.VARCHAR, (TypeHandler)(new StringTypeHandler()));\n        this.register((Class)String.class, JdbcType.LONGVARCHAR, (TypeHandler)(new ClobTypeHandler()));\n        this.register((Class)String.class, JdbcType.NVARCHAR, (TypeHandler)(new NStringTypeHandler()));\n        this.register((Class)String.class, JdbcType.NCHAR, (TypeHandler)(new NStringTypeHandler()));\n        this.register((Class)String.class, JdbcType.NCLOB, (TypeHandler)(new NClobTypeHandler()));\n        this.register((JdbcType)JdbcType.CHAR, (TypeHandler)(new StringTypeHandler()));\n        this.register((JdbcType)JdbcType.VARCHAR, (TypeHandler)(new StringTypeHandler()));\n        this.register((JdbcType)JdbcType.CLOB, (TypeHandler)(new ClobTypeHandler()));\n        this.register((JdbcType)JdbcType.LONGVARCHAR, (TypeHandler)(new ClobTypeHandler()));\n        this.register((JdbcType)JdbcType.NVARCHAR, (TypeHandler)(new NStringTypeHandler()));\n        this.register((JdbcType)JdbcType.NCHAR, (TypeHandler)(new NStringTypeHandler()));\n        this.register((JdbcType)JdbcType.NCLOB, (TypeHandler)(new NClobTypeHandler()));\n        this.register((Class)Object.class, JdbcType.ARRAY, (TypeHandler)(new ArrayTypeHandler()));\n        this.register((JdbcType)JdbcType.ARRAY, (TypeHandler)(new ArrayTypeHandler()));\n        this.register((Class)BigInteger.class, (TypeHandler)(new BigIntegerTypeHandler()));\n        this.register((JdbcType)JdbcType.BIGINT, (TypeHandler)(new LongTypeHandler()));\n        this.register((Class)BigDecimal.class, (TypeHandler)(new BigDecimalTypeHandler()));\n        this.register((JdbcType)JdbcType.REAL, (TypeHandler)(new BigDecimalTypeHandler()));\n        this.register((JdbcType)JdbcType.DECIMAL, (TypeHandler)(new BigDecimalTypeHandler()));\n        this.register((JdbcType)JdbcType.NUMERIC, (TypeHandler)(new BigDecimalTypeHandler()));\n        this.register((Class)InputStream.class, (TypeHandler)(new BlobInputStreamTypeHandler()));\n        this.register((Class)Byte[].class, (TypeHandler)(new ByteObjectArrayTypeHandler()));\n        this.register((Class)Byte[].class, JdbcType.BLOB, (TypeHandler)(new BlobByteObjectArrayTypeHandler()));\n        this.register((Class)Byte[].class, JdbcType.LONGVARBINARY, (TypeHandler)(new BlobByteObjectArrayTypeHandler()));\n        this.register((Class)byte[].class, (TypeHandler)(new ByteArrayTypeHandler()));\n        this.register((Class)byte[].class, JdbcType.BLOB, (TypeHandler)(new BlobTypeHandler()));\n        this.register((Class)byte[].class, JdbcType.LONGVARBINARY, (TypeHandler)(new BlobTypeHandler()));\n        this.register((JdbcType)JdbcType.LONGVARBINARY, (TypeHandler)(new BlobTypeHandler()));\n        this.register((JdbcType)JdbcType.BLOB, (TypeHandler)(new BlobTypeHandler()));\n        this.register(Object.class, this.UNKNOWN_TYPE_HANDLER);\n        this.register(Object.class, JdbcType.OTHER, this.UNKNOWN_TYPE_HANDLER);\n        this.register(JdbcType.OTHER, this.UNKNOWN_TYPE_HANDLER);\n        this.register((Class)Date.class, (TypeHandler)(new DateTypeHandler()));\n        this.register((Class)Date.class, JdbcType.DATE, (TypeHandler)(new DateOnlyTypeHandler()));\n        this.register((Class)Date.class, JdbcType.TIME, (TypeHandler)(new TimeOnlyTypeHandler()));\n        this.register((JdbcType)JdbcType.TIMESTAMP, (TypeHandler)(new DateTypeHandler()));\n        this.register((JdbcType)JdbcType.DATE, (TypeHandler)(new DateOnlyTypeHandler()));\n        this.register((JdbcType)JdbcType.TIME, (TypeHandler)(new TimeOnlyTypeHandler()));\n        this.register((Class)java.sql.Date.class, (TypeHandler)(new SqlDateTypeHandler()));\n        this.register((Class)Time.class, (TypeHandler)(new SqlTimeTypeHandler()));\n        this.register((Class)Timestamp.class, (TypeHandler)(new SqlTimestampTypeHandler()));\n...\n}\n```\n\n如果业务需要对某个字段类型进行特殊处理,我们可以自定义TypeHandler进行使用,如下 :\n\n```java\n// 自定义类型转换器进行业务处理\npublic class ExampleTypeHandler extends BaseTypeHandler<String> {\n\n  @Override\n  public void setNonNullParameter(PreparedStatement ps, int i, String parameter, JdbcType jdbcType) throws SQLException {\n    ps.setString(i, parameter);\n  }\n\n  @Override\n  public String getNullableResult(ResultSet rs, String columnName) throws SQLException {\n    return rs.getString(columnName);\n  }\n\n  @Override\n  public String getNullableResult(ResultSet rs, int columnIndex) throws SQLException {\n    return rs.getString(columnIndex);\n  }\n\n  @Override\n  public String getNullableResult(CallableStatement cs, int columnIndex) throws SQLException {\n    return cs.getString(columnIndex);\n  }\n}\n```\n\n```xml\n<!-- 注册该自定义的Handler 配置mybatis-config.xml -->\n<typeHandlers>\n  <typeHandler handler=\"com.mybatis.test.ExampleTypeHandler\"/>\n</typeHandlers>\n```\n```xml\n<!-- 使用方式一 jdbc类型转java类型 -->\n<resultMap id=\"BaseResultMap\" type=\"cn.az.model.ActivityApply\" >\n    <id column=\"ACTIVITY_APPLY_ID\" property=\"activityApplyId\" jdbcType=\"VARCHAR\" />\n    <result typeHandler=\"com.mybatis.test.ExampleTypeHandler\" column=\"EMP_K_ACCOUNT\" property=\"empKAccount\" jdbcType=\"VARCHAR\" />\n</resultMap>\n```\n```xml\n<!-- 使用方式二 java类型转jdbc类型-->\n<select id=\"getBrandList\" resultType=\"cn.az.vo.DictionariesVo\">\n\t\tselect emp.BRAND_CODE as code,brand.BRAND_NAME as name\n\t\tfrom T_MARKET_EMPLOYEE_BRAND emp\n\t\tleft join T_BRAND_INFO brand\n\t\ton brand.BRAND_CODE = emp.BRAND_CODE\n\t\tand brand.TA_CODE = #{taCode, typeHandler=com.mybatis.test.ExampleTypeHandler}\n\t\twhere MARKET_EMPLOYEE_ID = #{marketEmployeeId}\n</select>\n```\n\n更多配置以及标签的使用可参考文档[Mybatis中文学习官网](https://mybatis.org/mybatis-3/zh/)\n\n# Mybatis的缓存\n---\n## 一级缓存\n一级缓存是存放在BaseExecutor执行器中的,是会话级别的缓存,无法跨会话访问,当用户访问数据库时,会先创建一个执行器,执行器访问缓存,如果已有数据则直接返回如果没有再调用数据库并且将查询结果返回用户后将数据存入缓存中。\n一级缓存默认就是开启的,namespace级别(同namespace中共享)\n`mybatis的增删改操作默认是会清空缓存的,查询操作默认是不会清空缓存的,也就是在mapper.xml文件中的<insert>/<update>等标签上有flushCache属性,会有默认值,为true执行该语句后会清空缓存,为false执行该语句后不会清空缓存`\n[![img](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309421.png)](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309421.png)\n`一级缓存如果跨会话使用的话会有脏数据,如一个会话先做一个查询然后对数据进行更新,更新后使用另一个会话去查询,此时查询的是另一个缓存中的数据而不是更新后的数据.`\n如果解决脏数据问题,那么就要使用二级缓存了.\n\n## 二级缓存\n二级缓存使用的是装饰着模式,当我们开启二级缓存后mybatis会对BaseExecutor进行一个包装,该包装对象为CachingExecutor.二级缓存的管理是使用TransactionalCacheManager进行管理的.\n如何开启二级缓存 :\n1. 在mybatis-config.xml配置文件中开启二级缓存\n```xml\n<setting name=\"cacheEnable\" value=\"true\"/>\n```\n2. 需要在写SQL的mapper.xml文件中加上标签\n```xml\n<cache/>\n<!--上下两者相等,下面的属性配置为默认配置-->\n<!-- <cache type=\"org.apache.ibatis.cache.impl.PerpetualCache\"\n\t   size=\"1024\"\n\t   eviction=\"LRU\"\n\t   flushInterval=\"120000\"\n\t   readOnly=\"false\"/> -->\n```\n如果开启二级缓存后,想要对某一个`<select>`标签进行二级缓存的使用关闭,可以使用属性`useCache=false`\n[![img](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309422.png)](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309422.png)\n\n# Mybatis的批量操作方式\n---\n\n> 通过JAVA代码\n\n通过java代码的方式进行for循环然后在循环内部进行新增和编辑操作(不建议使用)该方式虽然写起来简单,但是会非常消耗性能,会多次建立连接和释放连接\n\n> mybatis支持批量操作的语句\n\n   SQL批量插入的语句 :\n   `insert into User (id,name ....) values (1, aaa ....) , (2, bbb ....) , (3, ccc ...) ....`\n   mybatis 使用动态标签`<foreach>` 拼接成该方式去批量插入,这样会减少数据库的连接与释放的次数以减少性能的消耗,但是数据库在接受sql时会有大小的限制,默认是`4m`大小,如果SQL语句拼接的过长的话会报错.\n   \n> mybatis支持自定义批量操作执行器\n\n   1) 自定义一个批量操作的执行器 Batch Executor\n   2) mybatis 支持三中执行器,执行器是封装在DefaultSqlSession 中的,真正执行SQL的就是该执行器,而SessionFactory所创建的Session只是提供了一些API供我们调用,执行器的三中模式 :\n   a. SIMPLE 最普通的执行器,使用的是Statement处理语句\n   b. REUSE 会重用预处理语句,使用PreparedStatement处理语句,意思是我们所执行过的语句会把它缓存起来,下次再执行的时候会从缓存里面去拿到该语句然后进行执行\n   c. BATCH 批处理执行器,JDBC链接操作数据库时提供了PreparedStatement.addBatch()方法去添加多个SQL语句,然后成批次的放入PreparedStatement的批处理执行器(executeBatch)中执行,无论是mybatis还是spirngjdbc都封装了该批处理方式\n\n# Mybatis的体系架构与执行流程\n---\n## 体系架构\n\n1. 提供给应用直接使用 : 接口层\n2. 处理数据库操作 : 核心层\n3. 支持工作(代码的抽取提供复用) : 基础层\n\n[![img](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309423.jpg)](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309423.jpg)\n\n## 工作流程\n\n1. 解析配置文件初始化Configuration对象\n2. 使用Build创建工厂类\n3. 使用工厂类创建会话\n4. 会话操作数据库\n\n> 流程图如下\n[![img](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309424.png)](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309424.png)\n\n> 具体流程细节时序图\n\n1. 配置文件解析流程与SqlSessionFactory的创建过程\n[![img](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309425.png)](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309425.png)\n\n2. 会话工厂创建会话的过程\n[![img](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309426.png)](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309426.png)\n\n3. 会话工厂通过getMapper(xxx.class)获取代理对象的过程\n[![img](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309427.png)](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309427.png)\n\n4. 代理对象执行SQL的过程\n[![img](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309428.png)](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309428.png)\n","source":"_posts/Mybatis学习总结.md","raw":"---\ntitle: Mybatis学习总结\ndate: 2020-09-04 15:45:40\ntags: [Mybatis]\nCategories: [Mybatis]\ncreated: 2020-05-25\nabbrlink: '202006030942'\ndescription: Mybatis的相关知识学习总结以及对整体的体系架构和工作流程的梳理，通过学习总结该部分内容深入理解该框架。\n---\n# Mybatis的介绍\n---\n## Mybatis的特性\n  + 使用连接池对连接进行管理\n  + SQL和代码分离,集中管理\n  + 参数可以映射并且可以写动态SQL\n  + 结果集映射\n  + 缓存管理\n  + 重复SQL可以提取重复使用\n  + 提供插件机制\n  \n## Mybatis的核心对象和其生命周期\n\n| 对象                     | 生命周期                    |\n| ------------------------ | --------------------------- |\n| SqlSeesionFactoryBuiler  | 方法局部 (method)           |\n| SqlSessionFactory (单例) | 应用级别 (application)      |\n| SqlSession               | 请求和操作 (request/method) |\n| Mapper                   | 方法 (method)               |\n\n## Mybatis的配置文件加载\n\n```java\nString resource = \"/mybatis-config.xml\";\nInputStream inputStream = Resources.getResourceAsStream(resource);\nSqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\n```\nMybatis会将配置文件加载到Configurition这个配置对象中(在SqlSessionFactoryBuilder中会对xml配置文件进行解析,并且通过XMLConfigBuilder对象将标签配置解析到Configuration对象中).\n```java\nprivate XMLConfigBuilder(XPathParser parser, String environment, Properties props) {\n    super(new Configuration());\n    this.localReflectorFactory = new DefaultReflectorFactory();\n    ErrorContext.instance().resource(\"SQL Mapper Configuration\");\n    this.configuration.setVariables(props);\n    this.parsed = false;\n    this.environment = environment;\n    this.parser = parser;\n}\n```\n\n## Mybatis的一些配置\n\n> TypeHandlers\n\nMybatis之所以可以将java类型与数据库类型进行转换是因为mybatis提供了大量的类型处理器(typeHandler),mybatis使用TypeHandlerRegistry对象去处理数据类型的对应,代码如下 :\n\n```java\npublic final class TypeHandlerRegistry {\n    private final Map<JdbcType, TypeHandler<?>> JDBC_TYPE_HANDLER_MAP = new EnumMap(JdbcType.class);\n    private final Map<Type, Map<JdbcType, TypeHandler<?>>> TYPE_HANDLER_MAP = new ConcurrentHashMap();\n    private final TypeHandler<Object> UNKNOWN_TYPE_HANDLER = new UnknownTypeHandler(this);\n    private final Map<Class<?>, TypeHandler<?>> ALL_TYPE_HANDLERS_MAP = new HashMap();\n    private static final Map<JdbcType, TypeHandler<?>> NULL_TYPE_HANDLER_MAP = new HashMap();\n\n    public TypeHandlerRegistry() {\n        this.register((Class)Boolean.class, (TypeHandler)(new BooleanTypeHandler()));\n        this.register((Class)Boolean.TYPE, (TypeHandler)(new BooleanTypeHandler()));\n        this.register((JdbcType)JdbcType.BOOLEAN, (TypeHandler)(new BooleanTypeHandler()));\n        this.register((JdbcType)JdbcType.BIT, (TypeHandler)(new BooleanTypeHandler()));\n        this.register((Class)Byte.class, (TypeHandler)(new ByteTypeHandler()));\n        this.register((Class)Byte.TYPE, (TypeHandler)(new ByteTypeHandler()));\n        this.register((JdbcType)JdbcType.TINYINT, (TypeHandler)(new ByteTypeHandler()));\n        this.register((Class)Short.class, (TypeHandler)(new ShortTypeHandler()));\n        this.register((Class)Short.TYPE, (TypeHandler)(new ShortTypeHandler()));\n        this.register((JdbcType)JdbcType.SMALLINT, (TypeHandler)(new ShortTypeHandler()));\n        this.register((Class)Integer.class, (TypeHandler)(new IntegerTypeHandler()));\n        this.register((Class)Integer.TYPE, (TypeHandler)(new IntegerTypeHandler()));\n        this.register((JdbcType)JdbcType.INTEGER, (TypeHandler)(new IntegerTypeHandler()));\n        this.register((Class)Long.class, (TypeHandler)(new LongTypeHandler()));\n        this.register((Class)Long.TYPE, (TypeHandler)(new LongTypeHandler()));\n        this.register((Class)Float.class, (TypeHandler)(new FloatTypeHandler()));\n        this.register((Class)Float.TYPE, (TypeHandler)(new FloatTypeHandler()));\n        this.register((JdbcType)JdbcType.FLOAT, (TypeHandler)(new FloatTypeHandler()));\n        this.register((Class)Double.class, (TypeHandler)(new DoubleTypeHandler()));\n        this.register((Class)Double.TYPE, (TypeHandler)(new DoubleTypeHandler()));\n        this.register((JdbcType)JdbcType.DOUBLE, (TypeHandler)(new DoubleTypeHandler()));\n        this.register((Class)Reader.class, (TypeHandler)(new ClobReaderTypeHandler()));\n        this.register((Class)String.class, (TypeHandler)(new StringTypeHandler()));\n        this.register((Class)String.class, JdbcType.CHAR, (TypeHandler)(new StringTypeHandler()));\n        this.register((Class)String.class, JdbcType.CLOB, (TypeHandler)(new ClobTypeHandler()));\n        this.register((Class)String.class, JdbcType.VARCHAR, (TypeHandler)(new StringTypeHandler()));\n        this.register((Class)String.class, JdbcType.LONGVARCHAR, (TypeHandler)(new ClobTypeHandler()));\n        this.register((Class)String.class, JdbcType.NVARCHAR, (TypeHandler)(new NStringTypeHandler()));\n        this.register((Class)String.class, JdbcType.NCHAR, (TypeHandler)(new NStringTypeHandler()));\n        this.register((Class)String.class, JdbcType.NCLOB, (TypeHandler)(new NClobTypeHandler()));\n        this.register((JdbcType)JdbcType.CHAR, (TypeHandler)(new StringTypeHandler()));\n        this.register((JdbcType)JdbcType.VARCHAR, (TypeHandler)(new StringTypeHandler()));\n        this.register((JdbcType)JdbcType.CLOB, (TypeHandler)(new ClobTypeHandler()));\n        this.register((JdbcType)JdbcType.LONGVARCHAR, (TypeHandler)(new ClobTypeHandler()));\n        this.register((JdbcType)JdbcType.NVARCHAR, (TypeHandler)(new NStringTypeHandler()));\n        this.register((JdbcType)JdbcType.NCHAR, (TypeHandler)(new NStringTypeHandler()));\n        this.register((JdbcType)JdbcType.NCLOB, (TypeHandler)(new NClobTypeHandler()));\n        this.register((Class)Object.class, JdbcType.ARRAY, (TypeHandler)(new ArrayTypeHandler()));\n        this.register((JdbcType)JdbcType.ARRAY, (TypeHandler)(new ArrayTypeHandler()));\n        this.register((Class)BigInteger.class, (TypeHandler)(new BigIntegerTypeHandler()));\n        this.register((JdbcType)JdbcType.BIGINT, (TypeHandler)(new LongTypeHandler()));\n        this.register((Class)BigDecimal.class, (TypeHandler)(new BigDecimalTypeHandler()));\n        this.register((JdbcType)JdbcType.REAL, (TypeHandler)(new BigDecimalTypeHandler()));\n        this.register((JdbcType)JdbcType.DECIMAL, (TypeHandler)(new BigDecimalTypeHandler()));\n        this.register((JdbcType)JdbcType.NUMERIC, (TypeHandler)(new BigDecimalTypeHandler()));\n        this.register((Class)InputStream.class, (TypeHandler)(new BlobInputStreamTypeHandler()));\n        this.register((Class)Byte[].class, (TypeHandler)(new ByteObjectArrayTypeHandler()));\n        this.register((Class)Byte[].class, JdbcType.BLOB, (TypeHandler)(new BlobByteObjectArrayTypeHandler()));\n        this.register((Class)Byte[].class, JdbcType.LONGVARBINARY, (TypeHandler)(new BlobByteObjectArrayTypeHandler()));\n        this.register((Class)byte[].class, (TypeHandler)(new ByteArrayTypeHandler()));\n        this.register((Class)byte[].class, JdbcType.BLOB, (TypeHandler)(new BlobTypeHandler()));\n        this.register((Class)byte[].class, JdbcType.LONGVARBINARY, (TypeHandler)(new BlobTypeHandler()));\n        this.register((JdbcType)JdbcType.LONGVARBINARY, (TypeHandler)(new BlobTypeHandler()));\n        this.register((JdbcType)JdbcType.BLOB, (TypeHandler)(new BlobTypeHandler()));\n        this.register(Object.class, this.UNKNOWN_TYPE_HANDLER);\n        this.register(Object.class, JdbcType.OTHER, this.UNKNOWN_TYPE_HANDLER);\n        this.register(JdbcType.OTHER, this.UNKNOWN_TYPE_HANDLER);\n        this.register((Class)Date.class, (TypeHandler)(new DateTypeHandler()));\n        this.register((Class)Date.class, JdbcType.DATE, (TypeHandler)(new DateOnlyTypeHandler()));\n        this.register((Class)Date.class, JdbcType.TIME, (TypeHandler)(new TimeOnlyTypeHandler()));\n        this.register((JdbcType)JdbcType.TIMESTAMP, (TypeHandler)(new DateTypeHandler()));\n        this.register((JdbcType)JdbcType.DATE, (TypeHandler)(new DateOnlyTypeHandler()));\n        this.register((JdbcType)JdbcType.TIME, (TypeHandler)(new TimeOnlyTypeHandler()));\n        this.register((Class)java.sql.Date.class, (TypeHandler)(new SqlDateTypeHandler()));\n        this.register((Class)Time.class, (TypeHandler)(new SqlTimeTypeHandler()));\n        this.register((Class)Timestamp.class, (TypeHandler)(new SqlTimestampTypeHandler()));\n...\n}\n```\n\n如果业务需要对某个字段类型进行特殊处理,我们可以自定义TypeHandler进行使用,如下 :\n\n```java\n// 自定义类型转换器进行业务处理\npublic class ExampleTypeHandler extends BaseTypeHandler<String> {\n\n  @Override\n  public void setNonNullParameter(PreparedStatement ps, int i, String parameter, JdbcType jdbcType) throws SQLException {\n    ps.setString(i, parameter);\n  }\n\n  @Override\n  public String getNullableResult(ResultSet rs, String columnName) throws SQLException {\n    return rs.getString(columnName);\n  }\n\n  @Override\n  public String getNullableResult(ResultSet rs, int columnIndex) throws SQLException {\n    return rs.getString(columnIndex);\n  }\n\n  @Override\n  public String getNullableResult(CallableStatement cs, int columnIndex) throws SQLException {\n    return cs.getString(columnIndex);\n  }\n}\n```\n\n```xml\n<!-- 注册该自定义的Handler 配置mybatis-config.xml -->\n<typeHandlers>\n  <typeHandler handler=\"com.mybatis.test.ExampleTypeHandler\"/>\n</typeHandlers>\n```\n```xml\n<!-- 使用方式一 jdbc类型转java类型 -->\n<resultMap id=\"BaseResultMap\" type=\"cn.az.model.ActivityApply\" >\n    <id column=\"ACTIVITY_APPLY_ID\" property=\"activityApplyId\" jdbcType=\"VARCHAR\" />\n    <result typeHandler=\"com.mybatis.test.ExampleTypeHandler\" column=\"EMP_K_ACCOUNT\" property=\"empKAccount\" jdbcType=\"VARCHAR\" />\n</resultMap>\n```\n```xml\n<!-- 使用方式二 java类型转jdbc类型-->\n<select id=\"getBrandList\" resultType=\"cn.az.vo.DictionariesVo\">\n\t\tselect emp.BRAND_CODE as code,brand.BRAND_NAME as name\n\t\tfrom T_MARKET_EMPLOYEE_BRAND emp\n\t\tleft join T_BRAND_INFO brand\n\t\ton brand.BRAND_CODE = emp.BRAND_CODE\n\t\tand brand.TA_CODE = #{taCode, typeHandler=com.mybatis.test.ExampleTypeHandler}\n\t\twhere MARKET_EMPLOYEE_ID = #{marketEmployeeId}\n</select>\n```\n\n更多配置以及标签的使用可参考文档[Mybatis中文学习官网](https://mybatis.org/mybatis-3/zh/)\n\n# Mybatis的缓存\n---\n## 一级缓存\n一级缓存是存放在BaseExecutor执行器中的,是会话级别的缓存,无法跨会话访问,当用户访问数据库时,会先创建一个执行器,执行器访问缓存,如果已有数据则直接返回如果没有再调用数据库并且将查询结果返回用户后将数据存入缓存中。\n一级缓存默认就是开启的,namespace级别(同namespace中共享)\n`mybatis的增删改操作默认是会清空缓存的,查询操作默认是不会清空缓存的,也就是在mapper.xml文件中的<insert>/<update>等标签上有flushCache属性,会有默认值,为true执行该语句后会清空缓存,为false执行该语句后不会清空缓存`\n[![img](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309421.png)](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309421.png)\n`一级缓存如果跨会话使用的话会有脏数据,如一个会话先做一个查询然后对数据进行更新,更新后使用另一个会话去查询,此时查询的是另一个缓存中的数据而不是更新后的数据.`\n如果解决脏数据问题,那么就要使用二级缓存了.\n\n## 二级缓存\n二级缓存使用的是装饰着模式,当我们开启二级缓存后mybatis会对BaseExecutor进行一个包装,该包装对象为CachingExecutor.二级缓存的管理是使用TransactionalCacheManager进行管理的.\n如何开启二级缓存 :\n1. 在mybatis-config.xml配置文件中开启二级缓存\n```xml\n<setting name=\"cacheEnable\" value=\"true\"/>\n```\n2. 需要在写SQL的mapper.xml文件中加上标签\n```xml\n<cache/>\n<!--上下两者相等,下面的属性配置为默认配置-->\n<!-- <cache type=\"org.apache.ibatis.cache.impl.PerpetualCache\"\n\t   size=\"1024\"\n\t   eviction=\"LRU\"\n\t   flushInterval=\"120000\"\n\t   readOnly=\"false\"/> -->\n```\n如果开启二级缓存后,想要对某一个`<select>`标签进行二级缓存的使用关闭,可以使用属性`useCache=false`\n[![img](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309422.png)](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309422.png)\n\n# Mybatis的批量操作方式\n---\n\n> 通过JAVA代码\n\n通过java代码的方式进行for循环然后在循环内部进行新增和编辑操作(不建议使用)该方式虽然写起来简单,但是会非常消耗性能,会多次建立连接和释放连接\n\n> mybatis支持批量操作的语句\n\n   SQL批量插入的语句 :\n   `insert into User (id,name ....) values (1, aaa ....) , (2, bbb ....) , (3, ccc ...) ....`\n   mybatis 使用动态标签`<foreach>` 拼接成该方式去批量插入,这样会减少数据库的连接与释放的次数以减少性能的消耗,但是数据库在接受sql时会有大小的限制,默认是`4m`大小,如果SQL语句拼接的过长的话会报错.\n   \n> mybatis支持自定义批量操作执行器\n\n   1) 自定义一个批量操作的执行器 Batch Executor\n   2) mybatis 支持三中执行器,执行器是封装在DefaultSqlSession 中的,真正执行SQL的就是该执行器,而SessionFactory所创建的Session只是提供了一些API供我们调用,执行器的三中模式 :\n   a. SIMPLE 最普通的执行器,使用的是Statement处理语句\n   b. REUSE 会重用预处理语句,使用PreparedStatement处理语句,意思是我们所执行过的语句会把它缓存起来,下次再执行的时候会从缓存里面去拿到该语句然后进行执行\n   c. BATCH 批处理执行器,JDBC链接操作数据库时提供了PreparedStatement.addBatch()方法去添加多个SQL语句,然后成批次的放入PreparedStatement的批处理执行器(executeBatch)中执行,无论是mybatis还是spirngjdbc都封装了该批处理方式\n\n# Mybatis的体系架构与执行流程\n---\n## 体系架构\n\n1. 提供给应用直接使用 : 接口层\n2. 处理数据库操作 : 核心层\n3. 支持工作(代码的抽取提供复用) : 基础层\n\n[![img](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309423.jpg)](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309423.jpg)\n\n## 工作流程\n\n1. 解析配置文件初始化Configuration对象\n2. 使用Build创建工厂类\n3. 使用工厂类创建会话\n4. 会话操作数据库\n\n> 流程图如下\n[![img](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309424.png)](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309424.png)\n\n> 具体流程细节时序图\n\n1. 配置文件解析流程与SqlSessionFactory的创建过程\n[![img](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309425.png)](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309425.png)\n\n2. 会话工厂创建会话的过程\n[![img](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309426.png)](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309426.png)\n\n3. 会话工厂通过getMapper(xxx.class)获取代理对象的过程\n[![img](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309427.png)](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309427.png)\n\n4. 代理对象执行SQL的过程\n[![img](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309428.png)](https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309428.png)\n","slug":"Mybatis学习总结","published":1,"updated":"2020-09-12T09:33:30.343Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckezh2btl0003ut7jaiz1137i","content":"<h1 id=\"Mybatis的介绍\"><a href=\"#Mybatis的介绍\" class=\"headerlink\" title=\"Mybatis的介绍\"></a>Mybatis的介绍</h1><hr>\n<h2 id=\"Mybatis的特性\"><a href=\"#Mybatis的特性\" class=\"headerlink\" title=\"Mybatis的特性\"></a>Mybatis的特性</h2><ul>\n<li>使用连接池对连接进行管理</li>\n<li>SQL和代码分离,集中管理</li>\n<li>参数可以映射并且可以写动态SQL</li>\n<li>结果集映射</li>\n<li>缓存管理</li>\n<li>重复SQL可以提取重复使用</li>\n<li>提供插件机制</li>\n</ul>\n<h2 id=\"Mybatis的核心对象和其生命周期\"><a href=\"#Mybatis的核心对象和其生命周期\" class=\"headerlink\" title=\"Mybatis的核心对象和其生命周期\"></a>Mybatis的核心对象和其生命周期</h2><table>\n<thead>\n<tr>\n<th>对象</th>\n<th>生命周期</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>SqlSeesionFactoryBuiler</td>\n<td>方法局部 (method)</td>\n</tr>\n<tr>\n<td>SqlSessionFactory (单例)</td>\n<td>应用级别 (application)</td>\n</tr>\n<tr>\n<td>SqlSession</td>\n<td>请求和操作 (request/method)</td>\n</tr>\n<tr>\n<td>Mapper</td>\n<td>方法 (method)</td>\n</tr>\n</tbody></table>\n<h2 id=\"Mybatis的配置文件加载\"><a href=\"#Mybatis的配置文件加载\" class=\"headerlink\" title=\"Mybatis的配置文件加载\"></a>Mybatis的配置文件加载</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String resource = <span class=\"string\">&quot;/mybatis-config.xml&quot;</span>;</span><br><span class=\"line\">InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class=\"line\">SqlSessionFactory sqlSessionFactory = <span class=\"keyword\">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br></pre></td></tr></table></figure>\n<p>Mybatis会将配置文件加载到Configurition这个配置对象中(在SqlSessionFactoryBuilder中会对xml配置文件进行解析,并且通过XMLConfigBuilder对象将标签配置解析到Configuration对象中).</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">XMLConfigBuilder</span><span class=\"params\">(XPathParser parser, String environment, Properties props)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(<span class=\"keyword\">new</span> Configuration());</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.localReflectorFactory = <span class=\"keyword\">new</span> DefaultReflectorFactory();</span><br><span class=\"line\">    ErrorContext.instance().resource(<span class=\"string\">&quot;SQL Mapper Configuration&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.configuration.setVariables(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.parsed = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.environment = environment;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.parser = parser;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Mybatis的一些配置\"><a href=\"#Mybatis的一些配置\" class=\"headerlink\" title=\"Mybatis的一些配置\"></a>Mybatis的一些配置</h2><blockquote>\n<p>TypeHandlers</p>\n</blockquote>\n<p>Mybatis之所以可以将java类型与数据库类型进行转换是因为mybatis提供了大量的类型处理器(typeHandler),mybatis使用TypeHandlerRegistry对象去处理数据类型的对应,代码如下 :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TypeHandlerRegistry</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;JdbcType, TypeHandler&lt;?&gt;&gt; JDBC_TYPE_HANDLER_MAP = <span class=\"keyword\">new</span> EnumMap(JdbcType.class);</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;Type, Map&lt;JdbcType, TypeHandler&lt;?&gt;&gt;&gt; TYPE_HANDLER_MAP = <span class=\"keyword\">new</span> ConcurrentHashMap();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> TypeHandler&lt;Object&gt; UNKNOWN_TYPE_HANDLER = <span class=\"keyword\">new</span> UnknownTypeHandler(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;Class&lt;?&gt;, TypeHandler&lt;?&gt;&gt; ALL_TYPE_HANDLERS_MAP = <span class=\"keyword\">new</span> HashMap();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Map&lt;JdbcType, TypeHandler&lt;?&gt;&gt; NULL_TYPE_HANDLER_MAP = <span class=\"keyword\">new</span> HashMap();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TypeHandlerRegistry</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)Boolean.class, (TypeHandler)(<span class=\"keyword\">new</span> BooleanTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)Boolean.TYPE, (TypeHandler)(<span class=\"keyword\">new</span> BooleanTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((JdbcType)JdbcType.BOOLEAN, (TypeHandler)(<span class=\"keyword\">new</span> BooleanTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((JdbcType)JdbcType.BIT, (TypeHandler)(<span class=\"keyword\">new</span> BooleanTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)Byte.class, (TypeHandler)(<span class=\"keyword\">new</span> ByteTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)Byte.TYPE, (TypeHandler)(<span class=\"keyword\">new</span> ByteTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((JdbcType)JdbcType.TINYINT, (TypeHandler)(<span class=\"keyword\">new</span> ByteTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)Short.class, (TypeHandler)(<span class=\"keyword\">new</span> ShortTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)Short.TYPE, (TypeHandler)(<span class=\"keyword\">new</span> ShortTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((JdbcType)JdbcType.SMALLINT, (TypeHandler)(<span class=\"keyword\">new</span> ShortTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)Integer.class, (TypeHandler)(<span class=\"keyword\">new</span> IntegerTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)Integer.TYPE, (TypeHandler)(<span class=\"keyword\">new</span> IntegerTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((JdbcType)JdbcType.INTEGER, (TypeHandler)(<span class=\"keyword\">new</span> IntegerTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)Long.class, (TypeHandler)(<span class=\"keyword\">new</span> LongTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)Long.TYPE, (TypeHandler)(<span class=\"keyword\">new</span> LongTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)Float.class, (TypeHandler)(<span class=\"keyword\">new</span> FloatTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)Float.TYPE, (TypeHandler)(<span class=\"keyword\">new</span> FloatTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((JdbcType)JdbcType.FLOAT, (TypeHandler)(<span class=\"keyword\">new</span> FloatTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)Double.class, (TypeHandler)(<span class=\"keyword\">new</span> DoubleTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)Double.TYPE, (TypeHandler)(<span class=\"keyword\">new</span> DoubleTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((JdbcType)JdbcType.DOUBLE, (TypeHandler)(<span class=\"keyword\">new</span> DoubleTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)Reader.class, (TypeHandler)(<span class=\"keyword\">new</span> ClobReaderTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)String.class, (TypeHandler)(<span class=\"keyword\">new</span> StringTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)String.class, JdbcType.CHAR, (TypeHandler)(<span class=\"keyword\">new</span> StringTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)String.class, JdbcType.CLOB, (TypeHandler)(<span class=\"keyword\">new</span> ClobTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)String.class, JdbcType.VARCHAR, (TypeHandler)(<span class=\"keyword\">new</span> StringTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)String.class, JdbcType.LONGVARCHAR, (TypeHandler)(<span class=\"keyword\">new</span> ClobTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)String.class, JdbcType.NVARCHAR, (TypeHandler)(<span class=\"keyword\">new</span> NStringTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)String.class, JdbcType.NCHAR, (TypeHandler)(<span class=\"keyword\">new</span> NStringTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)String.class, JdbcType.NCLOB, (TypeHandler)(<span class=\"keyword\">new</span> NClobTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((JdbcType)JdbcType.CHAR, (TypeHandler)(<span class=\"keyword\">new</span> StringTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((JdbcType)JdbcType.VARCHAR, (TypeHandler)(<span class=\"keyword\">new</span> StringTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((JdbcType)JdbcType.CLOB, (TypeHandler)(<span class=\"keyword\">new</span> ClobTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((JdbcType)JdbcType.LONGVARCHAR, (TypeHandler)(<span class=\"keyword\">new</span> ClobTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((JdbcType)JdbcType.NVARCHAR, (TypeHandler)(<span class=\"keyword\">new</span> NStringTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((JdbcType)JdbcType.NCHAR, (TypeHandler)(<span class=\"keyword\">new</span> NStringTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((JdbcType)JdbcType.NCLOB, (TypeHandler)(<span class=\"keyword\">new</span> NClobTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)Object.class, JdbcType.ARRAY, (TypeHandler)(<span class=\"keyword\">new</span> ArrayTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((JdbcType)JdbcType.ARRAY, (TypeHandler)(<span class=\"keyword\">new</span> ArrayTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)BigInteger.class, (TypeHandler)(<span class=\"keyword\">new</span> BigIntegerTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((JdbcType)JdbcType.BIGINT, (TypeHandler)(<span class=\"keyword\">new</span> LongTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)BigDecimal.class, (TypeHandler)(<span class=\"keyword\">new</span> BigDecimalTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((JdbcType)JdbcType.REAL, (TypeHandler)(<span class=\"keyword\">new</span> BigDecimalTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((JdbcType)JdbcType.DECIMAL, (TypeHandler)(<span class=\"keyword\">new</span> BigDecimalTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((JdbcType)JdbcType.NUMERIC, (TypeHandler)(<span class=\"keyword\">new</span> BigDecimalTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)InputStream.class, (TypeHandler)(<span class=\"keyword\">new</span> BlobInputStreamTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)Byte[].class, (TypeHandler)(<span class=\"keyword\">new</span> ByteObjectArrayTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)Byte[].class, JdbcType.BLOB, (TypeHandler)(<span class=\"keyword\">new</span> BlobByteObjectArrayTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)Byte[].class, JdbcType.LONGVARBINARY, (TypeHandler)(<span class=\"keyword\">new</span> BlobByteObjectArrayTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)<span class=\"keyword\">byte</span>[].class, (TypeHandler)(<span class=\"keyword\">new</span> ByteArrayTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)<span class=\"keyword\">byte</span>[].class, JdbcType.BLOB, (TypeHandler)(<span class=\"keyword\">new</span> BlobTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)<span class=\"keyword\">byte</span>[].class, JdbcType.LONGVARBINARY, (TypeHandler)(<span class=\"keyword\">new</span> BlobTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((JdbcType)JdbcType.LONGVARBINARY, (TypeHandler)(<span class=\"keyword\">new</span> BlobTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((JdbcType)JdbcType.BLOB, (TypeHandler)(<span class=\"keyword\">new</span> BlobTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register(Object.class, <span class=\"keyword\">this</span>.UNKNOWN_TYPE_HANDLER);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register(Object.class, JdbcType.OTHER, <span class=\"keyword\">this</span>.UNKNOWN_TYPE_HANDLER);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register(JdbcType.OTHER, <span class=\"keyword\">this</span>.UNKNOWN_TYPE_HANDLER);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)Date.class, (TypeHandler)(<span class=\"keyword\">new</span> DateTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)Date.class, JdbcType.DATE, (TypeHandler)(<span class=\"keyword\">new</span> DateOnlyTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)Date.class, JdbcType.TIME, (TypeHandler)(<span class=\"keyword\">new</span> TimeOnlyTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((JdbcType)JdbcType.TIMESTAMP, (TypeHandler)(<span class=\"keyword\">new</span> DateTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((JdbcType)JdbcType.DATE, (TypeHandler)(<span class=\"keyword\">new</span> DateOnlyTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((JdbcType)JdbcType.TIME, (TypeHandler)(<span class=\"keyword\">new</span> TimeOnlyTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)java.sql.Date.class, (TypeHandler)(<span class=\"keyword\">new</span> SqlDateTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)Time.class, (TypeHandler)(<span class=\"keyword\">new</span> SqlTimeTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)Timestamp.class, (TypeHandler)(<span class=\"keyword\">new</span> SqlTimestampTypeHandler()));</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果业务需要对某个字段类型进行特殊处理,我们可以自定义TypeHandler进行使用,如下 :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 自定义类型转换器进行业务处理</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExampleTypeHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseTypeHandler</span>&lt;<span class=\"title\">String</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setNonNullParameter</span><span class=\"params\">(PreparedStatement ps, <span class=\"keyword\">int</span> i, String parameter, JdbcType jdbcType)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">    ps.setString(i, parameter);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getNullableResult</span><span class=\"params\">(ResultSet rs, String columnName)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rs.getString(columnName);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getNullableResult</span><span class=\"params\">(ResultSet rs, <span class=\"keyword\">int</span> columnIndex)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rs.getString(columnIndex);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getNullableResult</span><span class=\"params\">(CallableStatement cs, <span class=\"keyword\">int</span> columnIndex)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cs.getString(columnIndex);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 注册该自定义的Handler 配置mybatis-config.xml --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">typeHandlers</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">typeHandler</span> <span class=\"attr\">handler</span>=<span class=\"string\">&quot;com.mybatis.test.ExampleTypeHandler&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">typeHandlers</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 使用方式一 jdbc类型转java类型 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BaseResultMap&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;cn.az.model.ActivityApply&quot;</span> &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;ACTIVITY_APPLY_ID&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;activityApplyId&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;VARCHAR&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">typeHandler</span>=<span class=\"string\">&quot;com.mybatis.test.ExampleTypeHandler&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;EMP_K_ACCOUNT&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;empKAccount&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;VARCHAR&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 使用方式二 java类型转jdbc类型--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;getBrandList&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;cn.az.vo.DictionariesVo&quot;</span>&gt;</span></span><br><span class=\"line\">\t\tselect emp.BRAND_CODE as code,brand.BRAND_NAME as name</span><br><span class=\"line\">\t\tfrom T_MARKET_EMPLOYEE_BRAND emp</span><br><span class=\"line\">\t\tleft join T_BRAND_INFO brand</span><br><span class=\"line\">\t\ton brand.BRAND_CODE = emp.BRAND_CODE</span><br><span class=\"line\">\t\tand brand.TA_CODE = #&#123;taCode, typeHandler=com.mybatis.test.ExampleTypeHandler&#125;</span><br><span class=\"line\">\t\twhere MARKET_EMPLOYEE_ID = #&#123;marketEmployeeId&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>更多配置以及标签的使用可参考文档<a href=\"https://mybatis.org/mybatis-3/zh/\">Mybatis中文学习官网</a></p>\n<h1 id=\"Mybatis的缓存\"><a href=\"#Mybatis的缓存\" class=\"headerlink\" title=\"Mybatis的缓存\"></a>Mybatis的缓存</h1><hr>\n<h2 id=\"一级缓存\"><a href=\"#一级缓存\" class=\"headerlink\" title=\"一级缓存\"></a>一级缓存</h2><p>一级缓存是存放在BaseExecutor执行器中的,是会话级别的缓存,无法跨会话访问,当用户访问数据库时,会先创建一个执行器,执行器访问缓存,如果已有数据则直接返回如果没有再调用数据库并且将查询结果返回用户后将数据存入缓存中。<br>一级缓存默认就是开启的,namespace级别(同namespace中共享)<br><code>mybatis的增删改操作默认是会清空缓存的,查询操作默认是不会清空缓存的,也就是在mapper.xml文件中的&lt;insert&gt;/&lt;update&gt;等标签上有flushCache属性,会有默认值,为true执行该语句后会清空缓存,为false执行该语句后不会清空缓存</code><br><a href=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309421.png\"><img src= \"/img/loading.gif\" data-lazy-src=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309421.png\" alt=\"img\"></a><br><code>一级缓存如果跨会话使用的话会有脏数据,如一个会话先做一个查询然后对数据进行更新,更新后使用另一个会话去查询,此时查询的是另一个缓存中的数据而不是更新后的数据.</code><br>如果解决脏数据问题,那么就要使用二级缓存了.</p>\n<h2 id=\"二级缓存\"><a href=\"#二级缓存\" class=\"headerlink\" title=\"二级缓存\"></a>二级缓存</h2><p>二级缓存使用的是装饰着模式,当我们开启二级缓存后mybatis会对BaseExecutor进行一个包装,该包装对象为CachingExecutor.二级缓存的管理是使用TransactionalCacheManager进行管理的.<br>如何开启二级缓存 :</p>\n<ol>\n<li>在mybatis-config.xml配置文件中开启二级缓存<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;cacheEnable&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>需要在写SQL的mapper.xml文件中加上标签<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">cache</span>/&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--上下两者相等,下面的属性配置为默认配置--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- &lt;cache type=&quot;org.apache.ibatis.cache.impl.PerpetualCache&quot;</span></span><br><span class=\"line\"><span class=\"comment\">\t   size=&quot;1024&quot;</span></span><br><span class=\"line\"><span class=\"comment\">\t   eviction=&quot;LRU&quot;</span></span><br><span class=\"line\"><span class=\"comment\">\t   flushInterval=&quot;120000&quot;</span></span><br><span class=\"line\"><span class=\"comment\">\t   readOnly=&quot;false&quot;/&gt; --&gt;</span></span><br></pre></td></tr></table></figure>\n如果开启二级缓存后,想要对某一个<code>&lt;select&gt;</code>标签进行二级缓存的使用关闭,可以使用属性<code>useCache=false</code><br><a href=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309422.png\"><img src= \"/img/loading.gif\" data-lazy-src=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309422.png\" alt=\"img\"></a></li>\n</ol>\n<h1 id=\"Mybatis的批量操作方式\"><a href=\"#Mybatis的批量操作方式\" class=\"headerlink\" title=\"Mybatis的批量操作方式\"></a>Mybatis的批量操作方式</h1><hr>\n<blockquote>\n<p>通过JAVA代码</p>\n</blockquote>\n<p>通过java代码的方式进行for循环然后在循环内部进行新增和编辑操作(不建议使用)该方式虽然写起来简单,但是会非常消耗性能,会多次建立连接和释放连接</p>\n<blockquote>\n<p>mybatis支持批量操作的语句</p>\n</blockquote>\n<p>   SQL批量插入的语句 :<br>   <code>insert into User (id,name ....) values (1, aaa ....) , (2, bbb ....) , (3, ccc ...) ....</code><br>   mybatis 使用动态标签<code>&lt;foreach&gt;</code> 拼接成该方式去批量插入,这样会减少数据库的连接与释放的次数以减少性能的消耗,但是数据库在接受sql时会有大小的限制,默认是<code>4m</code>大小,如果SQL语句拼接的过长的话会报错.</p>\n<blockquote>\n<p>mybatis支持自定义批量操作执行器</p>\n</blockquote>\n<ol>\n<li>自定义一个批量操作的执行器 Batch Executor</li>\n<li>mybatis 支持三中执行器,执行器是封装在DefaultSqlSession 中的,真正执行SQL的就是该执行器,而SessionFactory所创建的Session只是提供了一些API供我们调用,执行器的三中模式 :<br>a. SIMPLE 最普通的执行器,使用的是Statement处理语句<br>b. REUSE 会重用预处理语句,使用PreparedStatement处理语句,意思是我们所执行过的语句会把它缓存起来,下次再执行的时候会从缓存里面去拿到该语句然后进行执行<br>c. BATCH 批处理执行器,JDBC链接操作数据库时提供了PreparedStatement.addBatch()方法去添加多个SQL语句,然后成批次的放入PreparedStatement的批处理执行器(executeBatch)中执行,无论是mybatis还是spirngjdbc都封装了该批处理方式</li>\n</ol>\n<h1 id=\"Mybatis的体系架构与执行流程\"><a href=\"#Mybatis的体系架构与执行流程\" class=\"headerlink\" title=\"Mybatis的体系架构与执行流程\"></a>Mybatis的体系架构与执行流程</h1><hr>\n<h2 id=\"体系架构\"><a href=\"#体系架构\" class=\"headerlink\" title=\"体系架构\"></a>体系架构</h2><ol>\n<li>提供给应用直接使用 : 接口层</li>\n<li>处理数据库操作 : 核心层</li>\n<li>支持工作(代码的抽取提供复用) : 基础层</li>\n</ol>\n<p><a href=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309423.jpg\"><img src= \"/img/loading.gif\" data-lazy-src=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309423.jpg\" alt=\"img\"></a></p>\n<h2 id=\"工作流程\"><a href=\"#工作流程\" class=\"headerlink\" title=\"工作流程\"></a>工作流程</h2><ol>\n<li>解析配置文件初始化Configuration对象</li>\n<li>使用Build创建工厂类</li>\n<li>使用工厂类创建会话</li>\n<li>会话操作数据库</li>\n</ol>\n<blockquote>\n<p>流程图如下<br><a href=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309424.png\"><img src= \"/img/loading.gif\" data-lazy-src=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309424.png\" alt=\"img\"></a></p>\n</blockquote>\n<blockquote>\n<p>具体流程细节时序图</p>\n</blockquote>\n<ol>\n<li><p>配置文件解析流程与SqlSessionFactory的创建过程<br><a href=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309425.png\"><img src= \"/img/loading.gif\" data-lazy-src=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309425.png\" alt=\"img\"></a></p>\n</li>\n<li><p>会话工厂创建会话的过程<br><a href=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309426.png\"><img src= \"/img/loading.gif\" data-lazy-src=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309426.png\" alt=\"img\"></a></p>\n</li>\n<li><p>会话工厂通过getMapper(xxx.class)获取代理对象的过程<br><a href=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309427.png\"><img src= \"/img/loading.gif\" data-lazy-src=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309427.png\" alt=\"img\"></a></p>\n</li>\n<li><p>代理对象执行SQL的过程<br><a href=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309428.png\"><img src= \"/img/loading.gif\" data-lazy-src=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309428.png\" alt=\"img\"></a></p>\n</li>\n</ol>\n","site":{"data":{}},"cover":"https://i.loli.net/2020/05/01/IuWi8QbHvzjlOPw.jpg","excerpt":"","more":"<h1 id=\"Mybatis的介绍\"><a href=\"#Mybatis的介绍\" class=\"headerlink\" title=\"Mybatis的介绍\"></a>Mybatis的介绍</h1><hr>\n<h2 id=\"Mybatis的特性\"><a href=\"#Mybatis的特性\" class=\"headerlink\" title=\"Mybatis的特性\"></a>Mybatis的特性</h2><ul>\n<li>使用连接池对连接进行管理</li>\n<li>SQL和代码分离,集中管理</li>\n<li>参数可以映射并且可以写动态SQL</li>\n<li>结果集映射</li>\n<li>缓存管理</li>\n<li>重复SQL可以提取重复使用</li>\n<li>提供插件机制</li>\n</ul>\n<h2 id=\"Mybatis的核心对象和其生命周期\"><a href=\"#Mybatis的核心对象和其生命周期\" class=\"headerlink\" title=\"Mybatis的核心对象和其生命周期\"></a>Mybatis的核心对象和其生命周期</h2><table>\n<thead>\n<tr>\n<th>对象</th>\n<th>生命周期</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>SqlSeesionFactoryBuiler</td>\n<td>方法局部 (method)</td>\n</tr>\n<tr>\n<td>SqlSessionFactory (单例)</td>\n<td>应用级别 (application)</td>\n</tr>\n<tr>\n<td>SqlSession</td>\n<td>请求和操作 (request/method)</td>\n</tr>\n<tr>\n<td>Mapper</td>\n<td>方法 (method)</td>\n</tr>\n</tbody></table>\n<h2 id=\"Mybatis的配置文件加载\"><a href=\"#Mybatis的配置文件加载\" class=\"headerlink\" title=\"Mybatis的配置文件加载\"></a>Mybatis的配置文件加载</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String resource = <span class=\"string\">&quot;/mybatis-config.xml&quot;</span>;</span><br><span class=\"line\">InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class=\"line\">SqlSessionFactory sqlSessionFactory = <span class=\"keyword\">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br></pre></td></tr></table></figure>\n<p>Mybatis会将配置文件加载到Configurition这个配置对象中(在SqlSessionFactoryBuilder中会对xml配置文件进行解析,并且通过XMLConfigBuilder对象将标签配置解析到Configuration对象中).</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">XMLConfigBuilder</span><span class=\"params\">(XPathParser parser, String environment, Properties props)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(<span class=\"keyword\">new</span> Configuration());</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.localReflectorFactory = <span class=\"keyword\">new</span> DefaultReflectorFactory();</span><br><span class=\"line\">    ErrorContext.instance().resource(<span class=\"string\">&quot;SQL Mapper Configuration&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.configuration.setVariables(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.parsed = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.environment = environment;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.parser = parser;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Mybatis的一些配置\"><a href=\"#Mybatis的一些配置\" class=\"headerlink\" title=\"Mybatis的一些配置\"></a>Mybatis的一些配置</h2><blockquote>\n<p>TypeHandlers</p>\n</blockquote>\n<p>Mybatis之所以可以将java类型与数据库类型进行转换是因为mybatis提供了大量的类型处理器(typeHandler),mybatis使用TypeHandlerRegistry对象去处理数据类型的对应,代码如下 :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TypeHandlerRegistry</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;JdbcType, TypeHandler&lt;?&gt;&gt; JDBC_TYPE_HANDLER_MAP = <span class=\"keyword\">new</span> EnumMap(JdbcType.class);</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;Type, Map&lt;JdbcType, TypeHandler&lt;?&gt;&gt;&gt; TYPE_HANDLER_MAP = <span class=\"keyword\">new</span> ConcurrentHashMap();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> TypeHandler&lt;Object&gt; UNKNOWN_TYPE_HANDLER = <span class=\"keyword\">new</span> UnknownTypeHandler(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;Class&lt;?&gt;, TypeHandler&lt;?&gt;&gt; ALL_TYPE_HANDLERS_MAP = <span class=\"keyword\">new</span> HashMap();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Map&lt;JdbcType, TypeHandler&lt;?&gt;&gt; NULL_TYPE_HANDLER_MAP = <span class=\"keyword\">new</span> HashMap();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TypeHandlerRegistry</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)Boolean.class, (TypeHandler)(<span class=\"keyword\">new</span> BooleanTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)Boolean.TYPE, (TypeHandler)(<span class=\"keyword\">new</span> BooleanTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((JdbcType)JdbcType.BOOLEAN, (TypeHandler)(<span class=\"keyword\">new</span> BooleanTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((JdbcType)JdbcType.BIT, (TypeHandler)(<span class=\"keyword\">new</span> BooleanTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)Byte.class, (TypeHandler)(<span class=\"keyword\">new</span> ByteTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)Byte.TYPE, (TypeHandler)(<span class=\"keyword\">new</span> ByteTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((JdbcType)JdbcType.TINYINT, (TypeHandler)(<span class=\"keyword\">new</span> ByteTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)Short.class, (TypeHandler)(<span class=\"keyword\">new</span> ShortTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)Short.TYPE, (TypeHandler)(<span class=\"keyword\">new</span> ShortTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((JdbcType)JdbcType.SMALLINT, (TypeHandler)(<span class=\"keyword\">new</span> ShortTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)Integer.class, (TypeHandler)(<span class=\"keyword\">new</span> IntegerTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)Integer.TYPE, (TypeHandler)(<span class=\"keyword\">new</span> IntegerTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((JdbcType)JdbcType.INTEGER, (TypeHandler)(<span class=\"keyword\">new</span> IntegerTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)Long.class, (TypeHandler)(<span class=\"keyword\">new</span> LongTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)Long.TYPE, (TypeHandler)(<span class=\"keyword\">new</span> LongTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)Float.class, (TypeHandler)(<span class=\"keyword\">new</span> FloatTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)Float.TYPE, (TypeHandler)(<span class=\"keyword\">new</span> FloatTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((JdbcType)JdbcType.FLOAT, (TypeHandler)(<span class=\"keyword\">new</span> FloatTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)Double.class, (TypeHandler)(<span class=\"keyword\">new</span> DoubleTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)Double.TYPE, (TypeHandler)(<span class=\"keyword\">new</span> DoubleTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((JdbcType)JdbcType.DOUBLE, (TypeHandler)(<span class=\"keyword\">new</span> DoubleTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)Reader.class, (TypeHandler)(<span class=\"keyword\">new</span> ClobReaderTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)String.class, (TypeHandler)(<span class=\"keyword\">new</span> StringTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)String.class, JdbcType.CHAR, (TypeHandler)(<span class=\"keyword\">new</span> StringTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)String.class, JdbcType.CLOB, (TypeHandler)(<span class=\"keyword\">new</span> ClobTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)String.class, JdbcType.VARCHAR, (TypeHandler)(<span class=\"keyword\">new</span> StringTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)String.class, JdbcType.LONGVARCHAR, (TypeHandler)(<span class=\"keyword\">new</span> ClobTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)String.class, JdbcType.NVARCHAR, (TypeHandler)(<span class=\"keyword\">new</span> NStringTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)String.class, JdbcType.NCHAR, (TypeHandler)(<span class=\"keyword\">new</span> NStringTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)String.class, JdbcType.NCLOB, (TypeHandler)(<span class=\"keyword\">new</span> NClobTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((JdbcType)JdbcType.CHAR, (TypeHandler)(<span class=\"keyword\">new</span> StringTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((JdbcType)JdbcType.VARCHAR, (TypeHandler)(<span class=\"keyword\">new</span> StringTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((JdbcType)JdbcType.CLOB, (TypeHandler)(<span class=\"keyword\">new</span> ClobTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((JdbcType)JdbcType.LONGVARCHAR, (TypeHandler)(<span class=\"keyword\">new</span> ClobTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((JdbcType)JdbcType.NVARCHAR, (TypeHandler)(<span class=\"keyword\">new</span> NStringTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((JdbcType)JdbcType.NCHAR, (TypeHandler)(<span class=\"keyword\">new</span> NStringTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((JdbcType)JdbcType.NCLOB, (TypeHandler)(<span class=\"keyword\">new</span> NClobTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)Object.class, JdbcType.ARRAY, (TypeHandler)(<span class=\"keyword\">new</span> ArrayTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((JdbcType)JdbcType.ARRAY, (TypeHandler)(<span class=\"keyword\">new</span> ArrayTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)BigInteger.class, (TypeHandler)(<span class=\"keyword\">new</span> BigIntegerTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((JdbcType)JdbcType.BIGINT, (TypeHandler)(<span class=\"keyword\">new</span> LongTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)BigDecimal.class, (TypeHandler)(<span class=\"keyword\">new</span> BigDecimalTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((JdbcType)JdbcType.REAL, (TypeHandler)(<span class=\"keyword\">new</span> BigDecimalTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((JdbcType)JdbcType.DECIMAL, (TypeHandler)(<span class=\"keyword\">new</span> BigDecimalTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((JdbcType)JdbcType.NUMERIC, (TypeHandler)(<span class=\"keyword\">new</span> BigDecimalTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)InputStream.class, (TypeHandler)(<span class=\"keyword\">new</span> BlobInputStreamTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)Byte[].class, (TypeHandler)(<span class=\"keyword\">new</span> ByteObjectArrayTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)Byte[].class, JdbcType.BLOB, (TypeHandler)(<span class=\"keyword\">new</span> BlobByteObjectArrayTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)Byte[].class, JdbcType.LONGVARBINARY, (TypeHandler)(<span class=\"keyword\">new</span> BlobByteObjectArrayTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)<span class=\"keyword\">byte</span>[].class, (TypeHandler)(<span class=\"keyword\">new</span> ByteArrayTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)<span class=\"keyword\">byte</span>[].class, JdbcType.BLOB, (TypeHandler)(<span class=\"keyword\">new</span> BlobTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)<span class=\"keyword\">byte</span>[].class, JdbcType.LONGVARBINARY, (TypeHandler)(<span class=\"keyword\">new</span> BlobTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((JdbcType)JdbcType.LONGVARBINARY, (TypeHandler)(<span class=\"keyword\">new</span> BlobTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((JdbcType)JdbcType.BLOB, (TypeHandler)(<span class=\"keyword\">new</span> BlobTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register(Object.class, <span class=\"keyword\">this</span>.UNKNOWN_TYPE_HANDLER);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register(Object.class, JdbcType.OTHER, <span class=\"keyword\">this</span>.UNKNOWN_TYPE_HANDLER);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register(JdbcType.OTHER, <span class=\"keyword\">this</span>.UNKNOWN_TYPE_HANDLER);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)Date.class, (TypeHandler)(<span class=\"keyword\">new</span> DateTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)Date.class, JdbcType.DATE, (TypeHandler)(<span class=\"keyword\">new</span> DateOnlyTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)Date.class, JdbcType.TIME, (TypeHandler)(<span class=\"keyword\">new</span> TimeOnlyTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((JdbcType)JdbcType.TIMESTAMP, (TypeHandler)(<span class=\"keyword\">new</span> DateTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((JdbcType)JdbcType.DATE, (TypeHandler)(<span class=\"keyword\">new</span> DateOnlyTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((JdbcType)JdbcType.TIME, (TypeHandler)(<span class=\"keyword\">new</span> TimeOnlyTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)java.sql.Date.class, (TypeHandler)(<span class=\"keyword\">new</span> SqlDateTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)Time.class, (TypeHandler)(<span class=\"keyword\">new</span> SqlTimeTypeHandler()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.register((Class)Timestamp.class, (TypeHandler)(<span class=\"keyword\">new</span> SqlTimestampTypeHandler()));</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果业务需要对某个字段类型进行特殊处理,我们可以自定义TypeHandler进行使用,如下 :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 自定义类型转换器进行业务处理</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExampleTypeHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseTypeHandler</span>&lt;<span class=\"title\">String</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setNonNullParameter</span><span class=\"params\">(PreparedStatement ps, <span class=\"keyword\">int</span> i, String parameter, JdbcType jdbcType)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">    ps.setString(i, parameter);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getNullableResult</span><span class=\"params\">(ResultSet rs, String columnName)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rs.getString(columnName);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getNullableResult</span><span class=\"params\">(ResultSet rs, <span class=\"keyword\">int</span> columnIndex)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rs.getString(columnIndex);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getNullableResult</span><span class=\"params\">(CallableStatement cs, <span class=\"keyword\">int</span> columnIndex)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cs.getString(columnIndex);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 注册该自定义的Handler 配置mybatis-config.xml --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">typeHandlers</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">typeHandler</span> <span class=\"attr\">handler</span>=<span class=\"string\">&quot;com.mybatis.test.ExampleTypeHandler&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">typeHandlers</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 使用方式一 jdbc类型转java类型 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BaseResultMap&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;cn.az.model.ActivityApply&quot;</span> &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;ACTIVITY_APPLY_ID&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;activityApplyId&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;VARCHAR&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">typeHandler</span>=<span class=\"string\">&quot;com.mybatis.test.ExampleTypeHandler&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;EMP_K_ACCOUNT&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;empKAccount&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;VARCHAR&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 使用方式二 java类型转jdbc类型--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;getBrandList&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;cn.az.vo.DictionariesVo&quot;</span>&gt;</span></span><br><span class=\"line\">\t\tselect emp.BRAND_CODE as code,brand.BRAND_NAME as name</span><br><span class=\"line\">\t\tfrom T_MARKET_EMPLOYEE_BRAND emp</span><br><span class=\"line\">\t\tleft join T_BRAND_INFO brand</span><br><span class=\"line\">\t\ton brand.BRAND_CODE = emp.BRAND_CODE</span><br><span class=\"line\">\t\tand brand.TA_CODE = #&#123;taCode, typeHandler=com.mybatis.test.ExampleTypeHandler&#125;</span><br><span class=\"line\">\t\twhere MARKET_EMPLOYEE_ID = #&#123;marketEmployeeId&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>更多配置以及标签的使用可参考文档<a href=\"https://mybatis.org/mybatis-3/zh/\">Mybatis中文学习官网</a></p>\n<h1 id=\"Mybatis的缓存\"><a href=\"#Mybatis的缓存\" class=\"headerlink\" title=\"Mybatis的缓存\"></a>Mybatis的缓存</h1><hr>\n<h2 id=\"一级缓存\"><a href=\"#一级缓存\" class=\"headerlink\" title=\"一级缓存\"></a>一级缓存</h2><p>一级缓存是存放在BaseExecutor执行器中的,是会话级别的缓存,无法跨会话访问,当用户访问数据库时,会先创建一个执行器,执行器访问缓存,如果已有数据则直接返回如果没有再调用数据库并且将查询结果返回用户后将数据存入缓存中。<br>一级缓存默认就是开启的,namespace级别(同namespace中共享)<br><code>mybatis的增删改操作默认是会清空缓存的,查询操作默认是不会清空缓存的,也就是在mapper.xml文件中的&lt;insert&gt;/&lt;update&gt;等标签上有flushCache属性,会有默认值,为true执行该语句后会清空缓存,为false执行该语句后不会清空缓存</code><br><a href=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309421.png\"><img src=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309421.png\" alt=\"img\"></a><br><code>一级缓存如果跨会话使用的话会有脏数据,如一个会话先做一个查询然后对数据进行更新,更新后使用另一个会话去查询,此时查询的是另一个缓存中的数据而不是更新后的数据.</code><br>如果解决脏数据问题,那么就要使用二级缓存了.</p>\n<h2 id=\"二级缓存\"><a href=\"#二级缓存\" class=\"headerlink\" title=\"二级缓存\"></a>二级缓存</h2><p>二级缓存使用的是装饰着模式,当我们开启二级缓存后mybatis会对BaseExecutor进行一个包装,该包装对象为CachingExecutor.二级缓存的管理是使用TransactionalCacheManager进行管理的.<br>如何开启二级缓存 :</p>\n<ol>\n<li>在mybatis-config.xml配置文件中开启二级缓存<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;cacheEnable&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>需要在写SQL的mapper.xml文件中加上标签<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">cache</span>/&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--上下两者相等,下面的属性配置为默认配置--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- &lt;cache type=&quot;org.apache.ibatis.cache.impl.PerpetualCache&quot;</span></span><br><span class=\"line\"><span class=\"comment\">\t   size=&quot;1024&quot;</span></span><br><span class=\"line\"><span class=\"comment\">\t   eviction=&quot;LRU&quot;</span></span><br><span class=\"line\"><span class=\"comment\">\t   flushInterval=&quot;120000&quot;</span></span><br><span class=\"line\"><span class=\"comment\">\t   readOnly=&quot;false&quot;/&gt; --&gt;</span></span><br></pre></td></tr></table></figure>\n如果开启二级缓存后,想要对某一个<code>&lt;select&gt;</code>标签进行二级缓存的使用关闭,可以使用属性<code>useCache=false</code><br><a href=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309422.png\"><img src=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309422.png\" alt=\"img\"></a></li>\n</ol>\n<h1 id=\"Mybatis的批量操作方式\"><a href=\"#Mybatis的批量操作方式\" class=\"headerlink\" title=\"Mybatis的批量操作方式\"></a>Mybatis的批量操作方式</h1><hr>\n<blockquote>\n<p>通过JAVA代码</p>\n</blockquote>\n<p>通过java代码的方式进行for循环然后在循环内部进行新增和编辑操作(不建议使用)该方式虽然写起来简单,但是会非常消耗性能,会多次建立连接和释放连接</p>\n<blockquote>\n<p>mybatis支持批量操作的语句</p>\n</blockquote>\n<p>   SQL批量插入的语句 :<br>   <code>insert into User (id,name ....) values (1, aaa ....) , (2, bbb ....) , (3, ccc ...) ....</code><br>   mybatis 使用动态标签<code>&lt;foreach&gt;</code> 拼接成该方式去批量插入,这样会减少数据库的连接与释放的次数以减少性能的消耗,但是数据库在接受sql时会有大小的限制,默认是<code>4m</code>大小,如果SQL语句拼接的过长的话会报错.</p>\n<blockquote>\n<p>mybatis支持自定义批量操作执行器</p>\n</blockquote>\n<ol>\n<li>自定义一个批量操作的执行器 Batch Executor</li>\n<li>mybatis 支持三中执行器,执行器是封装在DefaultSqlSession 中的,真正执行SQL的就是该执行器,而SessionFactory所创建的Session只是提供了一些API供我们调用,执行器的三中模式 :<br>a. SIMPLE 最普通的执行器,使用的是Statement处理语句<br>b. REUSE 会重用预处理语句,使用PreparedStatement处理语句,意思是我们所执行过的语句会把它缓存起来,下次再执行的时候会从缓存里面去拿到该语句然后进行执行<br>c. BATCH 批处理执行器,JDBC链接操作数据库时提供了PreparedStatement.addBatch()方法去添加多个SQL语句,然后成批次的放入PreparedStatement的批处理执行器(executeBatch)中执行,无论是mybatis还是spirngjdbc都封装了该批处理方式</li>\n</ol>\n<h1 id=\"Mybatis的体系架构与执行流程\"><a href=\"#Mybatis的体系架构与执行流程\" class=\"headerlink\" title=\"Mybatis的体系架构与执行流程\"></a>Mybatis的体系架构与执行流程</h1><hr>\n<h2 id=\"体系架构\"><a href=\"#体系架构\" class=\"headerlink\" title=\"体系架构\"></a>体系架构</h2><ol>\n<li>提供给应用直接使用 : 接口层</li>\n<li>处理数据库操作 : 核心层</li>\n<li>支持工作(代码的抽取提供复用) : 基础层</li>\n</ol>\n<p><a href=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309423.jpg\"><img src=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309423.jpg\" alt=\"img\"></a></p>\n<h2 id=\"工作流程\"><a href=\"#工作流程\" class=\"headerlink\" title=\"工作流程\"></a>工作流程</h2><ol>\n<li>解析配置文件初始化Configuration对象</li>\n<li>使用Build创建工厂类</li>\n<li>使用工厂类创建会话</li>\n<li>会话操作数据库</li>\n</ol>\n<blockquote>\n<p>流程图如下<br><a href=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309424.png\"><img src=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309424.png\" alt=\"img\"></a></p>\n</blockquote>\n<blockquote>\n<p>具体流程细节时序图</p>\n</blockquote>\n<ol>\n<li><p>配置文件解析流程与SqlSessionFactory的创建过程<br><a href=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309425.png\"><img src=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309425.png\" alt=\"img\"></a></p>\n</li>\n<li><p>会话工厂创建会话的过程<br><a href=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309426.png\"><img src=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309426.png\" alt=\"img\"></a></p>\n</li>\n<li><p>会话工厂通过getMapper(xxx.class)获取代理对象的过程<br><a href=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309427.png\"><img src=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309427.png\" alt=\"img\"></a></p>\n</li>\n<li><p>代理对象执行SQL的过程<br><a href=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309428.png\"><img src=\"https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309428.png\" alt=\"img\"></a></p>\n</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckezh2btf0001ut7jbv5kg6w7","category_id":"ckeuqc46g0004ee7jeyvc8slc","_id":"ckezh2bto0008ut7j726tbfl6"}],"PostTag":[{"post_id":"ckezh2btf0001ut7jbv5kg6w7","tag_id":"ckeuqc46h0005ee7j9brbdam1","_id":"ckezh2btn0004ut7j26a98ci8"},{"post_id":"ckezh2btf0001ut7jbv5kg6w7","tag_id":"ckeuqc46l0009ee7jgqg819px","_id":"ckezh2bto0006ut7jdqrtfg17"},{"post_id":"ckezh2btl0003ut7jaiz1137i","tag_id":"ckeuqc46p000cee7j98auhv4f","_id":"ckezh2bto0009ut7jgm33cg1b"}],"Tag":[{"name":"Gitlab","_id":"ckeuqc46h0005ee7j9brbdam1"},{"name":"安装手册","_id":"ckeuqc46l0009ee7jgqg819px"},{"name":"Mybatis","_id":"ckeuqc46p000cee7j98auhv4f"}]}}