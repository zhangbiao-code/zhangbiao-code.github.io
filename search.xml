<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CentOS7中搭建Gitlab</title>
      <link href="/posts/202005250941.html"/>
      <url>/posts/202005250941.html</url>
      
        <content type="html"><![CDATA[<h1 id="CentOS搭建Gitlab的详细教程"><a href="#CentOS搭建Gitlab的详细教程" class="headerlink" title="CentOS搭建Gitlab的详细教程"></a>CentOS搭建Gitlab的详细教程</h1><p>记录一次CentOS搭建gitlab服务器的经历。</p><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><ol><li>服务器：CentOS7</li><li>安装文件：<a href="https://packages.gitlab.com/gitlab/gitlab-ce/packages/el/7/gitlab-ce-12.6.3-ce.0.el7.x86_64.rpm">gitlab-ce-12.6.3-ce.0.el7.x86_64.rpm</a></li></ol><h2 id="安装gitlab"><a href="#安装gitlab" class="headerlink" title="安装gitlab"></a>安装gitlab</h2><p>介绍一下两种安装方式 yum安装、rmp安装。</p><h3 id="yum安装"><a href="#yum安装" class="headerlink" title="yum安装"></a>yum安装</h3><p>这里直接参考<a href="https://about.gitlab.com/install/#centos-7">官网</a>安装教程</p><p><a href="https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941-0/2020052509411.png"><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509411.png" alt="gitlab安装教程"></a></p><p>打开linux系统终端，首先安装gitlab必须的ssh，以及在系统防火墙中打开HTTP、HTTPS和SSH访问。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y curl policycoreutils-python openssh-server</span><br><span class="line">sudo systemctl enable sshd</span><br><span class="line">sudo systemctl start sshd</span><br><span class="line">sudo firewall-cmd --permanent --add-service&#x3D;http</span><br><span class="line">sudo firewall-cmd --permanent --add-service&#x3D;https</span><br><span class="line">sudo systemctl reload firewalld</span><br></pre></td></tr></table></figure><p>然后是安装发送邮件功能的postfix</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install postfix</span><br><span class="line">sudo systemctl enable postfix</span><br><span class="line">sudo systemctl start postfix</span><br></pre></td></tr></table></figure><p>添加gitlab的包仓库（ee改成ce）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https:&#x2F;&#x2F;packages.gitlab.com&#x2F;install&#x2F;repositories&#x2F;gitlab&#x2F;gitlab-ce&#x2F;script.rpm.sh | sudo bash</span><br></pre></td></tr></table></figure><p>安装gitlab（EXTERNAL_URL指的是你的gitlab访问地址，这里改为http://+你的linux系统ip）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo EXTERNAL_URL&#x3D;&quot;http:&#x2F;&#x2F;当前系统的ip或域名&quot; yum install -y gitlab-ce</span><br></pre></td></tr></table></figure><h3 id="rpm安装"><a href="#rpm安装" class="headerlink" title="rpm安装"></a>rpm安装</h3><p>使用官网的安装方式下载很慢，这里可以直接下载rmp安装包手动安装。</p><p>首先去<a href="https://packages.gitlab.com/gitlab/gitlab-ce/">官网安装包仓库</a>下载我们所需的安装包版本</p><p><a href="https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941-0/2020052509412.png"><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509412.png" alt="官网安装包仓库"></a></p><p>下载完成之后将文件拷贝至你的linux服务器，同样需要配置ssh、防火墙、postfix，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;安装gitlab必须的ssh，以及在系统防火墙中打开HTTP、HTTPS和SSH访问。</span><br><span class="line">sudo yum install -y curl policycoreutils-python openssh-server</span><br><span class="line">sudo systemctl enable sshd</span><br><span class="line">sudo systemctl start sshd</span><br><span class="line">sudo firewall-cmd --permanent --add-service&#x3D;http</span><br><span class="line">sudo firewall-cmd --permanent --add-service&#x3D;https</span><br><span class="line">sudo systemctl reload firewalld</span><br><span class="line">&#x2F;&#x2F;安装发送邮件功能的postfix</span><br><span class="line">sudo yum install postfix</span><br><span class="line">sudo systemctl enable postfix</span><br><span class="line">sudo systemctl start postfix</span><br></pre></td></tr></table></figure><p>然后cd进入你的安装包路径进行安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;安装 example.rpm 包并在安装过程中显示正在安装的文件信息及安装进度</span><br><span class="line">rpm -ivh example.rpm</span><br></pre></td></tr></table></figure><p>出现下图即为安装成功</p><p><a href="https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509413.png"><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509413.png" alt="安装成功图"></a></p><p>这种方式需要我们手动进入配置文件中修改访问地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo vim &#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;修改文件中external_url &#39;http:&#x2F;&#x2F;你linux的ip或域名&#39;</span><br></pre></td></tr></table></figure><p>并且我们还需要修改默认的gitlab clone地址，要不每次都得自己修改</p><p><a href="https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509414.png"><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509414.png" alt="img"></a></p><p>修改文件配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim &#x2F;opt&#x2F;gitlab&#x2F;embedded&#x2F;service&#x2F;gitlab-rails&#x2F;config&#x2F;gitlab.yml</span><br></pre></td></tr></table></figure><p>将图片上标红处的Host替换成你的域名或ip</p><p><a href="https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509415.png"><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509415.png" alt="img"></a></p><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p>重置并启动GitLab，执行以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl reconfigure</span><br><span class="line"></span><br><span class="line">gitlab-ctl restart</span><br></pre></td></tr></table></figure><p>提示 “ok: run:”表示启动成功</p><p><a href="https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509416.png"><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509416.png" alt="img"></a></p><p>然后浏览器上输入你的访问地址（第一次访问会让你输入新密码，用户名默认为root）</p><p><a href="https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509417.png"><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202005250941/2020052509417.png" alt="img"></a></p><h2 id="修改访问端口"><a href="#修改访问端口" class="headerlink" title="修改访问端口"></a>修改访问端口</h2><p>由于unicorn默认使用的是 <code>8080</code> 端口，打开 <code>/etc/gitlab/gitlab.rb</code> ，打开 <code># unicorn[&#39;port&#39;] = 8080</code> 的注释，将 <code>8080</code> 修改为 <code>9999</code> ，保存后运行 <code>sudo gitlab-ctl reconfigure</code> 即可(该端口不可与上方修改的端口一致)。</p><h2 id="安装过程中遇到的问题"><a href="#安装过程中遇到的问题" class="headerlink" title="安装过程中遇到的问题"></a>安装过程中遇到的问题</h2><ol><li>在浏览器中访问GitLab出现502错误：<br>原因：内存不足。<br>解决办法：检查系统的虚拟内存是否随机启动了，如果系统无虚拟内存，则增加虚拟内存，再重新启动系统。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Gitlab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gitlab </tag>
            
            <tag> 安装手册 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis学习总结</title>
      <link href="/posts/202006030942.html"/>
      <url>/posts/202006030942.html</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis的介绍"><a href="#Mybatis的介绍" class="headerlink" title="Mybatis的介绍"></a>Mybatis的介绍</h1><hr><h2 id="Mybatis的特性"><a href="#Mybatis的特性" class="headerlink" title="Mybatis的特性"></a>Mybatis的特性</h2><ul><li>使用连接池对连接进行管理</li><li>SQL和代码分离,集中管理</li><li>参数可以映射并且可以写动态SQL</li><li>结果集映射</li><li>缓存管理</li><li>重复SQL可以提取重复使用</li><li>提供插件机制</li></ul><h2 id="Mybatis的核心对象和其生命周期"><a href="#Mybatis的核心对象和其生命周期" class="headerlink" title="Mybatis的核心对象和其生命周期"></a>Mybatis的核心对象和其生命周期</h2><table><thead><tr><th>对象</th><th>生命周期</th></tr></thead><tbody><tr><td>SqlSeesionFactoryBuiler</td><td>方法局部 (method)</td></tr><tr><td>SqlSessionFactory (单例)</td><td>应用级别 (application)</td></tr><tr><td>SqlSession</td><td>请求和操作 (request/method)</td></tr><tr><td>Mapper</td><td>方法 (method)</td></tr></tbody></table><h2 id="Mybatis的配置文件加载"><a href="#Mybatis的配置文件加载" class="headerlink" title="Mybatis的配置文件加载"></a>Mybatis的配置文件加载</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String resource = <span class="string">&quot;/mybatis-config.xml&quot;</span>;</span><br><span class="line">InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br></pre></td></tr></table></figure><p>Mybatis会将配置文件加载到Configurition这个配置对象中(在SqlSessionFactoryBuilder中会对xml配置文件进行解析,并且通过XMLConfigBuilder对象将标签配置解析到Configuration对象中).</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">XMLConfigBuilder</span><span class="params">(XPathParser parser, String environment, Properties props)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="keyword">new</span> Configuration());</span><br><span class="line">    <span class="keyword">this</span>.localReflectorFactory = <span class="keyword">new</span> DefaultReflectorFactory();</span><br><span class="line">    ErrorContext.instance().resource(<span class="string">&quot;SQL Mapper Configuration&quot;</span>);</span><br><span class="line">    <span class="keyword">this</span>.configuration.setVariables(props);</span><br><span class="line">    <span class="keyword">this</span>.parsed = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">this</span>.environment = environment;</span><br><span class="line">    <span class="keyword">this</span>.parser = parser;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Mybatis的一些配置"><a href="#Mybatis的一些配置" class="headerlink" title="Mybatis的一些配置"></a>Mybatis的一些配置</h2><blockquote><p>TypeHandlers</p></blockquote><p>Mybatis之所以可以将java类型与数据库类型进行转换是因为mybatis提供了大量的类型处理器(typeHandler),mybatis使用TypeHandlerRegistry对象去处理数据类型的对应,代码如下 :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TypeHandlerRegistry</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;JdbcType, TypeHandler&lt;?&gt;&gt; JDBC_TYPE_HANDLER_MAP = <span class="keyword">new</span> EnumMap(JdbcType.class);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Type, Map&lt;JdbcType, TypeHandler&lt;?&gt;&gt;&gt; TYPE_HANDLER_MAP = <span class="keyword">new</span> ConcurrentHashMap();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TypeHandler&lt;Object&gt; UNKNOWN_TYPE_HANDLER = <span class="keyword">new</span> UnknownTypeHandler(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Class&lt;?&gt;, TypeHandler&lt;?&gt;&gt; ALL_TYPE_HANDLERS_MAP = <span class="keyword">new</span> HashMap();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;JdbcType, TypeHandler&lt;?&gt;&gt; NULL_TYPE_HANDLER_MAP = <span class="keyword">new</span> HashMap();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TypeHandlerRegistry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.register((Class)Boolean.class, (TypeHandler)(<span class="keyword">new</span> BooleanTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((Class)Boolean.TYPE, (TypeHandler)(<span class="keyword">new</span> BooleanTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((JdbcType)JdbcType.BOOLEAN, (TypeHandler)(<span class="keyword">new</span> BooleanTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((JdbcType)JdbcType.BIT, (TypeHandler)(<span class="keyword">new</span> BooleanTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((Class)Byte.class, (TypeHandler)(<span class="keyword">new</span> ByteTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((Class)Byte.TYPE, (TypeHandler)(<span class="keyword">new</span> ByteTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((JdbcType)JdbcType.TINYINT, (TypeHandler)(<span class="keyword">new</span> ByteTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((Class)Short.class, (TypeHandler)(<span class="keyword">new</span> ShortTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((Class)Short.TYPE, (TypeHandler)(<span class="keyword">new</span> ShortTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((JdbcType)JdbcType.SMALLINT, (TypeHandler)(<span class="keyword">new</span> ShortTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((Class)Integer.class, (TypeHandler)(<span class="keyword">new</span> IntegerTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((Class)Integer.TYPE, (TypeHandler)(<span class="keyword">new</span> IntegerTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((JdbcType)JdbcType.INTEGER, (TypeHandler)(<span class="keyword">new</span> IntegerTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((Class)Long.class, (TypeHandler)(<span class="keyword">new</span> LongTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((Class)Long.TYPE, (TypeHandler)(<span class="keyword">new</span> LongTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((Class)Float.class, (TypeHandler)(<span class="keyword">new</span> FloatTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((Class)Float.TYPE, (TypeHandler)(<span class="keyword">new</span> FloatTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((JdbcType)JdbcType.FLOAT, (TypeHandler)(<span class="keyword">new</span> FloatTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((Class)Double.class, (TypeHandler)(<span class="keyword">new</span> DoubleTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((Class)Double.TYPE, (TypeHandler)(<span class="keyword">new</span> DoubleTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((JdbcType)JdbcType.DOUBLE, (TypeHandler)(<span class="keyword">new</span> DoubleTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((Class)Reader.class, (TypeHandler)(<span class="keyword">new</span> ClobReaderTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((Class)String.class, (TypeHandler)(<span class="keyword">new</span> StringTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((Class)String.class, JdbcType.CHAR, (TypeHandler)(<span class="keyword">new</span> StringTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((Class)String.class, JdbcType.CLOB, (TypeHandler)(<span class="keyword">new</span> ClobTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((Class)String.class, JdbcType.VARCHAR, (TypeHandler)(<span class="keyword">new</span> StringTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((Class)String.class, JdbcType.LONGVARCHAR, (TypeHandler)(<span class="keyword">new</span> ClobTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((Class)String.class, JdbcType.NVARCHAR, (TypeHandler)(<span class="keyword">new</span> NStringTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((Class)String.class, JdbcType.NCHAR, (TypeHandler)(<span class="keyword">new</span> NStringTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((Class)String.class, JdbcType.NCLOB, (TypeHandler)(<span class="keyword">new</span> NClobTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((JdbcType)JdbcType.CHAR, (TypeHandler)(<span class="keyword">new</span> StringTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((JdbcType)JdbcType.VARCHAR, (TypeHandler)(<span class="keyword">new</span> StringTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((JdbcType)JdbcType.CLOB, (TypeHandler)(<span class="keyword">new</span> ClobTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((JdbcType)JdbcType.LONGVARCHAR, (TypeHandler)(<span class="keyword">new</span> ClobTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((JdbcType)JdbcType.NVARCHAR, (TypeHandler)(<span class="keyword">new</span> NStringTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((JdbcType)JdbcType.NCHAR, (TypeHandler)(<span class="keyword">new</span> NStringTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((JdbcType)JdbcType.NCLOB, (TypeHandler)(<span class="keyword">new</span> NClobTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((Class)Object.class, JdbcType.ARRAY, (TypeHandler)(<span class="keyword">new</span> ArrayTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((JdbcType)JdbcType.ARRAY, (TypeHandler)(<span class="keyword">new</span> ArrayTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((Class)BigInteger.class, (TypeHandler)(<span class="keyword">new</span> BigIntegerTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((JdbcType)JdbcType.BIGINT, (TypeHandler)(<span class="keyword">new</span> LongTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((Class)BigDecimal.class, (TypeHandler)(<span class="keyword">new</span> BigDecimalTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((JdbcType)JdbcType.REAL, (TypeHandler)(<span class="keyword">new</span> BigDecimalTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((JdbcType)JdbcType.DECIMAL, (TypeHandler)(<span class="keyword">new</span> BigDecimalTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((JdbcType)JdbcType.NUMERIC, (TypeHandler)(<span class="keyword">new</span> BigDecimalTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((Class)InputStream.class, (TypeHandler)(<span class="keyword">new</span> BlobInputStreamTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((Class)Byte[].class, (TypeHandler)(<span class="keyword">new</span> ByteObjectArrayTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((Class)Byte[].class, JdbcType.BLOB, (TypeHandler)(<span class="keyword">new</span> BlobByteObjectArrayTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((Class)Byte[].class, JdbcType.LONGVARBINARY, (TypeHandler)(<span class="keyword">new</span> BlobByteObjectArrayTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((Class)<span class="keyword">byte</span>[].class, (TypeHandler)(<span class="keyword">new</span> ByteArrayTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((Class)<span class="keyword">byte</span>[].class, JdbcType.BLOB, (TypeHandler)(<span class="keyword">new</span> BlobTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((Class)<span class="keyword">byte</span>[].class, JdbcType.LONGVARBINARY, (TypeHandler)(<span class="keyword">new</span> BlobTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((JdbcType)JdbcType.LONGVARBINARY, (TypeHandler)(<span class="keyword">new</span> BlobTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((JdbcType)JdbcType.BLOB, (TypeHandler)(<span class="keyword">new</span> BlobTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register(Object.class, <span class="keyword">this</span>.UNKNOWN_TYPE_HANDLER);</span><br><span class="line">        <span class="keyword">this</span>.register(Object.class, JdbcType.OTHER, <span class="keyword">this</span>.UNKNOWN_TYPE_HANDLER);</span><br><span class="line">        <span class="keyword">this</span>.register(JdbcType.OTHER, <span class="keyword">this</span>.UNKNOWN_TYPE_HANDLER);</span><br><span class="line">        <span class="keyword">this</span>.register((Class)Date.class, (TypeHandler)(<span class="keyword">new</span> DateTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((Class)Date.class, JdbcType.DATE, (TypeHandler)(<span class="keyword">new</span> DateOnlyTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((Class)Date.class, JdbcType.TIME, (TypeHandler)(<span class="keyword">new</span> TimeOnlyTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((JdbcType)JdbcType.TIMESTAMP, (TypeHandler)(<span class="keyword">new</span> DateTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((JdbcType)JdbcType.DATE, (TypeHandler)(<span class="keyword">new</span> DateOnlyTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((JdbcType)JdbcType.TIME, (TypeHandler)(<span class="keyword">new</span> TimeOnlyTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((Class)java.sql.Date.class, (TypeHandler)(<span class="keyword">new</span> SqlDateTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((Class)Time.class, (TypeHandler)(<span class="keyword">new</span> SqlTimeTypeHandler()));</span><br><span class="line">        <span class="keyword">this</span>.register((Class)Timestamp.class, (TypeHandler)(<span class="keyword">new</span> SqlTimestampTypeHandler()));</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果业务需要对某个字段类型进行特殊处理,我们可以自定义TypeHandler进行使用,如下 :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义类型转换器进行业务处理</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleTypeHandler</span> <span class="keyword">extends</span> <span class="title">BaseTypeHandler</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNonNullParameter</span><span class="params">(PreparedStatement ps, <span class="keyword">int</span> i, String parameter, JdbcType jdbcType)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    ps.setString(i, parameter);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getNullableResult</span><span class="params">(ResultSet rs, String columnName)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> rs.getString(columnName);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getNullableResult</span><span class="params">(ResultSet rs, <span class="keyword">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> rs.getString(columnIndex);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getNullableResult</span><span class="params">(CallableStatement cs, <span class="keyword">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> cs.getString(columnIndex);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册该自定义的Handler 配置mybatis-config.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeHandlers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeHandler</span> <span class="attr">handler</span>=<span class="string">&quot;com.mybatis.test.ExampleTypeHandler&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeHandlers</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用方式一 jdbc类型转java类型 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;cn.az.model.ActivityApply&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;ACTIVITY_APPLY_ID&quot;</span> <span class="attr">property</span>=<span class="string">&quot;activityApplyId&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">typeHandler</span>=<span class="string">&quot;com.mybatis.test.ExampleTypeHandler&quot;</span> <span class="attr">column</span>=<span class="string">&quot;EMP_K_ACCOUNT&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empKAccount&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用方式二 java类型转jdbc类型--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getBrandList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;cn.az.vo.DictionariesVo&quot;</span>&gt;</span></span><br><span class="line">select emp.BRAND_CODE as code,brand.BRAND_NAME as name</span><br><span class="line">from T_MARKET_EMPLOYEE_BRAND emp</span><br><span class="line">left join T_BRAND_INFO brand</span><br><span class="line">on brand.BRAND_CODE = emp.BRAND_CODE</span><br><span class="line">and brand.TA_CODE = #&#123;taCode, typeHandler=com.mybatis.test.ExampleTypeHandler&#125;</span><br><span class="line">where MARKET_EMPLOYEE_ID = #&#123;marketEmployeeId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>更多配置以及标签的使用可参考文档<a href="https://mybatis.org/mybatis-3/zh/">Mybatis中文学习官网</a></p><h1 id="Mybatis的缓存"><a href="#Mybatis的缓存" class="headerlink" title="Mybatis的缓存"></a>Mybatis的缓存</h1><hr><h2 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h2><p>一级缓存是存放在BaseExecutor执行器中的,是会话级别的缓存,无法跨会话访问,当用户访问数据库时,会先创建一个执行器,执行器访问缓存,如果已有数据则直接返回如果没有再调用数据库并且将查询结果返回用户后将数据存入缓存中。<br>一级缓存默认就是开启的,namespace级别(同namespace中共享)<br><code>mybatis的增删改操作默认是会清空缓存的,查询操作默认是不会清空缓存的,也就是在mapper.xml文件中的&lt;insert&gt;/&lt;update&gt;等标签上有flushCache属性,会有默认值,为true执行该语句后会清空缓存,为false执行该语句后不会清空缓存</code><br><a href="https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309421.png"><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309421.png" alt="img"></a><br><code>一级缓存如果跨会话使用的话会有脏数据,如一个会话先做一个查询然后对数据进行更新,更新后使用另一个会话去查询,此时查询的是另一个缓存中的数据而不是更新后的数据.</code><br>如果解决脏数据问题,那么就要使用二级缓存了.</p><h2 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h2><p>二级缓存使用的是装饰着模式,当我们开启二级缓存后mybatis会对BaseExecutor进行一个包装,该包装对象为CachingExecutor.二级缓存的管理是使用TransactionalCacheManager进行管理的.<br>如何开启二级缓存 :</p><ol><li>在mybatis-config.xml配置文件中开启二级缓存<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnable&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li>需要在写SQL的mapper.xml文件中加上标签<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--上下两者相等,下面的属性配置为默认配置--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;cache type=&quot;org.apache.ibatis.cache.impl.PerpetualCache&quot;</span></span><br><span class="line"><span class="comment">   size=&quot;1024&quot;</span></span><br><span class="line"><span class="comment">   eviction=&quot;LRU&quot;</span></span><br><span class="line"><span class="comment">   flushInterval=&quot;120000&quot;</span></span><br><span class="line"><span class="comment">   readOnly=&quot;false&quot;/&gt; --&gt;</span></span><br></pre></td></tr></table></figure>如果开启二级缓存后,想要对某一个<code>&lt;select&gt;</code>标签进行二级缓存的使用关闭,可以使用属性<code>useCache=false</code><br><a href="https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309422.png"><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309422.png" alt="img"></a></li></ol><h1 id="Mybatis的批量操作方式"><a href="#Mybatis的批量操作方式" class="headerlink" title="Mybatis的批量操作方式"></a>Mybatis的批量操作方式</h1><hr><blockquote><p>通过JAVA代码</p></blockquote><p>通过java代码的方式进行for循环然后在循环内部进行新增和编辑操作(不建议使用)该方式虽然写起来简单,但是会非常消耗性能,会多次建立连接和释放连接</p><blockquote><p>mybatis支持批量操作的语句</p></blockquote><p>   SQL批量插入的语句 :<br>   <code>insert into User (id,name ....) values (1, aaa ....) , (2, bbb ....) , (3, ccc ...) ....</code><br>   mybatis 使用动态标签<code>&lt;foreach&gt;</code> 拼接成该方式去批量插入,这样会减少数据库的连接与释放的次数以减少性能的消耗,但是数据库在接受sql时会有大小的限制,默认是<code>4m</code>大小,如果SQL语句拼接的过长的话会报错.</p><blockquote><p>mybatis支持自定义批量操作执行器</p></blockquote><ol><li>自定义一个批量操作的执行器 Batch Executor</li><li>mybatis 支持三中执行器,执行器是封装在DefaultSqlSession 中的,真正执行SQL的就是该执行器,而SessionFactory所创建的Session只是提供了一些API供我们调用,执行器的三中模式 :<br>a. SIMPLE 最普通的执行器,使用的是Statement处理语句<br>b. REUSE 会重用预处理语句,使用PreparedStatement处理语句,意思是我们所执行过的语句会把它缓存起来,下次再执行的时候会从缓存里面去拿到该语句然后进行执行<br>c. BATCH 批处理执行器,JDBC链接操作数据库时提供了PreparedStatement.addBatch()方法去添加多个SQL语句,然后成批次的放入PreparedStatement的批处理执行器(executeBatch)中执行,无论是mybatis还是spirngjdbc都封装了该批处理方式</li></ol><h1 id="Mybatis的体系架构与执行流程"><a href="#Mybatis的体系架构与执行流程" class="headerlink" title="Mybatis的体系架构与执行流程"></a>Mybatis的体系架构与执行流程</h1><hr><h2 id="体系架构"><a href="#体系架构" class="headerlink" title="体系架构"></a>体系架构</h2><ol><li>提供给应用直接使用 : 接口层</li><li>处理数据库操作 : 核心层</li><li>支持工作(代码的抽取提供复用) : 基础层</li></ol><p><a href="https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309423.jpg"><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309423.jpg" alt="img"></a></p><h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><ol><li>解析配置文件初始化Configuration对象</li><li>使用Build创建工厂类</li><li>使用工厂类创建会话</li><li>会话操作数据库</li></ol><blockquote><p>流程图如下<br><a href="https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309424.png"><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309424.png" alt="img"></a></p></blockquote><blockquote><p>具体流程细节时序图</p></blockquote><ol><li><p>配置文件解析流程与SqlSessionFactory的创建过程<br><a href="https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309425.png"><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309425.png" alt="img"></a></p></li><li><p>会话工厂创建会话的过程<br><a href="https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309426.png"><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309426.png" alt="img"></a></p></li><li><p>会话工厂通过getMapper(xxx.class)获取代理对象的过程<br><a href="https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309427.png"><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309427.png" alt="img"></a></p></li><li><p>代理对象执行SQL的过程<br><a href="https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309428.png"><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zhangbiao-code/blog_cdn@master/image/essay/202006030942/2020060309428.png" alt="img"></a></p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
